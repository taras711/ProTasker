const fs = require('fs');
const path = require('path');
const vscode = require('vscode');

class NotesExplorer {
    constructor() {
        this.activeDecorationType = null;
        this._onDidChangeTreeData = new vscode.EventEmitter();
        this.onDidChangeTreeData = this._onDidChangeTreeData.event;
        
        this.dataNotes = path.join(__dirname, 'notesData.json');
        this.notesData = this.loadNotes();
    }

    loadNotes() {
        try {
            if (fs.existsSync(this.dataNotes)) {
                const data = JSON.parse(fs.readFileSync(this.dataNotes).toString());
                return data;
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫:", error);
        }
        return { files: {}, directories: {}, lines: {} };
    }

    saveNotesToFile() {
        try {
            fs.writeFileSync(this.dataNotes, JSON.stringify(this.notesData, null, 2));
            this.refresh();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫:", error);
        }
    }

    getTreeItem(element) {
        const treeItem = new vscode.TreeItem(element.label, vscode.TreeItemCollapsibleState.None);
    
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π contextValue –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        if (["note", "comment", "checklist", "event"].includes(element.type)) {
            treeItem.id = element.id;  // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º id
            treeItem.contextValue = `${element.type}Item`;  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –∫–∞–∫ —Å—É—Ñ—Ñ–∏–∫—Å
        } else if (element.type === "line") {
            treeItem.contextValue = "lineItem";
        } else {
            treeItem.contextValue = "folderItem";
        }
        console.log(JSON.stringify(element))
    
        return treeItem;
    }

    getData(data){
        if(!data) return {};
        const keys = Object.keys(data).map(filePath => {return data[filePath]})

        return keys;
    }
    

    async getChildren(element) {
        if (!element) {
            const categories = ['files', 'directories', 'lines'];
            const results = [];
            
            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories.forEach(cat => {
                const categoryData = this.notesData[cat]; // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                Object.keys(categoryData).forEach(itemPath => {
                    const item = categoryData[itemPath];
                    console.log(this.extractItemData(item))
                    // –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, file –∏–ª–∏ directory) –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (notes, comments –∏ —Ç.–¥.)
                    results.push({
                        label: cat === "directories" ? this.getDirectoryLabel(itemPath) :
                           cat === "files" ? this.getFileLabel(itemPath) :
                           `üìå ${path.basename(itemPath)}`,
                        type: cat, // –¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (file, directory, –∏–ª–∏ line)
                        path: itemPath,
                        ...this.extractItemData(item), // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ: –∑–∞–º–µ—Ç–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Å–æ–±—ã—Ç–∏—è –∏ —Ç.–¥.
                    });
                });
            });
            
            return results;
        } else if (element.type === "file") {
            return [
                ...this.getEntries(this.notesData.files[element.path], element.path)
            ];
        } else if (element.type === "directory") {
            return [
                ...this.getEntries(this.notesData.directories[element.path], element.path)
            ];
        } else if (element.type === "lineGroup") {
            return Object.keys(this.notesData.lines[element.path] || {}).map(lineNumber => ({
                label: `üìå Line ${lineNumber}`,
                type: "line",
                line: parseInt(lineNumber),
                path: element.path
            }));
        } else if (element.type === "line") {
            const fileNotes = this.notesData.lines[element.path]?.[element.line] || [];
            if (fileNotes.length > 0) {
                return fileNotes.map(note => ({
                    label: `üìå ${note.content}`,
                    type: "note",
                    line: element.line,
                    filePath: element.path,
                    noteId: note.id
                }));
            }
        }

        if (element.type === "file") {
            return this.getEntries(this.notesData.files[element.path] || {}, element.path);
        }
        if (element.type === "directory") {
            return this.getEntries(this.notesData.directories[element.path] || {}, element.path);
        }
        return [];
    }
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–∫–æ–≤ —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
getFileLabel(filePath) {
    const hasNotes = this.notesData.files[filePath]?.notes.length > 0;
    const hasComments = Object.keys(this.notesData.files[filePath]?.lines || {}).length > 0;
    return `${hasNotes || hasComments ? 'üìù ' : ''}${path.basename(filePath)}`;
}

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–ø–æ–∫
getDirectoryLabel(directoryPath) {
    const hasNotes = this.notesData.directories[directoryPath]?.notes.length > 0;
    return `${hasNotes ? 'üìÇüìù ' : 'üìÇ '}${path.basename(directoryPath)}`;
}

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ—Ç–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —á–µ–∫–ª–∏—Å—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è) –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
extractItemData(item, parent = null) {
    const allCategories = ['notes', 'comments', 'checklists', 'events']; // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    const extractedData = [];

    // –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ—Ç–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ç.–¥.)
    allCategories.forEach(category => {
        if (item[category] && item[category].length > 0) {
            item[category].forEach(entry => {
                extractedData.push({
                    label: `${category.slice(0, 1).toUpperCase()}${category.slice(1)}: ${entry.content}`, // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    type: category.slice(0, -1), // –¢–∏–ø –∑–∞–ø–∏—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "note", "comment", –∏ —Ç.–¥.
                    id: entry.id,
                    content: entry.content,
                    createdAt: entry.createdAt || new Date().toISOString(),
                    parent: parent ? parent.path : null, // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –ø—É—Ç—å
                });
            });
        }
    });

    return extractedData;
}

    getEntries(target, parentPath) {
        if (!target) return [];

        return [
            ...(target.notes || []).map(note => ({
                label: `üìù ${note.content}`,
                type: "note",
                id: note.id,
                parent: parentPath
            })),
            ...(target.comments || []).map(comment => ({
                label: `üí¨ ${comment.content}`,
                type: "comment",
                id: comment.id,
                parent: parentPath
            })),
            ...(target.checklists || []).map(checklist => ({
                label: `‚úÖ ${checklist.content}`,
                type: "checklist",
                id: checklist.id,
                parent: parentPath
            })),
            ...(target.events || []).map(event => ({
                label: `üìÖ ${event.content}`,
                type: "event",
                id: event.id,
                parent: parentPath
            }))
        ];
    }

    async addNoteToFile(filePath, content, type = "note") {
        if (!this.notesData.files[filePath]) {
            this.notesData.files[filePath] = { notes: [] };
        }
        this.notesData.files[filePath][type + "s"].push({
            id: Date.now(),
            type,
            categories: "file",
            content,
            createdAt: new Date().toISOString()
        });

        await this.saveNotesToFile();
    }

    addNoteToLine(filePath, lineNumber, entryType, noteContent) {
        const typeKey = entryType.toLowerCase() + "s";  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, "comments", "checklists"
        filePath = path.normalize(filePath).replace(/\\/g, "/").toLowerCase() // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, –∏ –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        // if (!this.notesData.files[filePath]) {
        //     this.notesData.files[filePath] = { notes: [], comments: [], checklists: [], events: [], lines: {} };
        // }
    
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø–∏—Å—å, –∏ –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
        if (!this.notesData.lines[filePath]) {
            this.notesData.lines[filePath] = [];
        }

        console.log(noteContent)
    
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç—Ä–æ–∫
        this.notesData.lines[filePath].push({
            line: lineNumber,
            id: Date.now(),
            type: entryType.toLowerCase(),
            content: noteContent,
            createdAt: new Date().toISOString()
        });
    
        this.saveNotesToFile();
    }

    normalizePath(filePath) {
        return path.normalize(filePath).replace(/\\/g, "/").toLowerCase();
    }
    

    refresh() {
        console.log("‚úÖ DEBUG: TreeView –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...");
        this._onDidChangeTreeData.fire();
    }

    async addEntry(targetPath, isDirectory = false, entryType, noteContent, categories) {
        const typeKey = entryType.toLowerCase() + "s"; // –ü—Ä–∏–º–µ—Ä: "notes", "comments", "checklists", "events"
    
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É
        let target;
        if (isDirectory) {
            if (!this.notesData.directories[targetPath]) {
                this.notesData.directories[targetPath] = { notes: [], comments: [], checklists: [], events: [] };
            }
            target = this.notesData.directories[targetPath];
        } else {
            if (!this.notesData.files[targetPath]) {
                this.notesData.files[targetPath] = { notes: [], comments: [], checklists: [], events: [] };
            }
            target = this.notesData.files[targetPath];
        }
    
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        target[typeKey].push({
            id: Date.now(),
            type: entryType.toLowerCase(),
            content: noteContent,  // –ü–µ—Ä–µ–¥–∞–µ–º —Å—é–¥–∞ —Ç–µ–∫—Å—Ç
            categories: categories,
            createdAt: new Date().toISOString()
        });
    
        await this.saveNotesToFile();
    }
    
    
    
}

module.exports = { NotesExplorer };
