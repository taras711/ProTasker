const fs = require('fs');
const path = require('path');
const vscode = require('vscode');
const timeago = require('timeago.js');

class NotesExplorer {
    constructor() {
        this.activeDecorationType = null;
        this._onDidChangeTreeData = new vscode.EventEmitter();
        this.onDidChangeTreeData = this._onDidChangeTreeData.event;
        this.timeago = timeago;
        this.viewId = null;
        this.dataNotes = path.join(__dirname, 'notesData.json');
        this.notesData = this.loadNotes();
        this.searchResults = null
        this.search = false;
    }

    loadNotes() {
        try {
            if (fs.existsSync(this.dataNotes)) {
                const data = JSON.parse(fs.readFileSync(this.dataNotes).toString());
                return data;
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫:", error);
        }
        return { files: {}, directories: {}, lines: {} };
    }

    saveNotesToFile() {
        try {
            fs.writeFileSync(this.dataNotes, JSON.stringify(this.notesData, null, 2));
            this.refresh();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫:", error);
        }
    }

    getTreeItem(element) {
        if (!element) {
            console.error("‚ùå –û—à–∏–±–∫–∞: element is undefined –≤ getTreeItem()");
            return new vscode.TreeItem("–û—à–∏–±–∫–∞", vscode.TreeItemCollapsibleState.None);
        }

        
        console.log(element)
        
    
        const treeItem = new vscode.TreeItem(element.label, element.collapsibleState);

        if (element.contextValue === "checklistItem") {
            treeItem.command = {
                command: "protasker.toggleChecklistItem",
                title: "Toggle Checklist Item",
                arguments: [element] // –ü–µ—Ä–µ–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–º–∞–Ω–¥—É
            };
        }
        treeItem.contextValue = element.contextValue;
        treeItem.tooltip = element.tooltip || "";
        treeItem.description = element.description || "";

        if (element.contextValue === "resetSearch" && (this.searchResults !== null || this.searchResults.length > 1)) {
            treeItem.command = {
                command: "protasker.resetSearch",
                title: "–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫"
            };
            treeItem.tooltip = "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞";
            treeItem.contextValue = "resetSearch"; // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º contextValue
        }

        return treeItem;
    }

    getData(data){
        if(!data) return {};
        const keys = Object.keys(data).map(filePath => {return data[filePath]})

        return keys;
    }
    

    async getChildren(element) {
       return await this.mainData(element)
    }

    async mainData(element, viewId = false){
            this.viewId = viewId || this.viewId;
            const editor = vscode.window.activeTextEditor;
            const file = editor ? path.normalize(editor.document.uri.fsPath).replace(/\\/g, "/").toLowerCase() : null;
            const pathDir = file ? file.slice(0, file.lastIndexOf('/')) : null;
            console.log("üìå –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ViewId...", this.viewId);
            if (!element) {
    
                const items = [];
    
                if (this.searchResults !== null && this.searchResults.length > 1) {
                    console.log("üìå –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞...", this.searchResults);
                    
                    return this.searchResults;
                }
                    
                // üå≥ –ö–æ—Ä–Ω–µ–≤–æ–π —Å–ø–∏—Å–æ–∫ ‚Äî –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ + —Ñ–∞–π–ª—ã + —Å—Ç—Ä–æ–∫–∏
                const directories = Object.keys(this.notesData.directories).map(dirPath =>{
                    const dirData = this.notesData.directories[dirPath];
                    const totalRecords = Object.values(dirData)
                        .filter(Array.isArray) // üõ°Ô∏è –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤—ã
                        .reduce((sum, category) => sum + category.length, 0);
                    if(this.viewId !== null && dirPath !== pathDir) return;
                    return new NoteItem(`üìÅ ${path.basename(dirPath)}`, vscode.TreeItemCollapsibleState.Collapsed, { count: totalRecords, directory: dirPath, prov: "file", contextValue: "directory" })
                });
                const files = Object.keys(this.notesData.files).map(filePath => {
                    const dirData = this.notesData.files[filePath];
                    const totalRecords = Object.values(dirData)
                        .filter(Array.isArray) // üõ°Ô∏è –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤—ã
                        .reduce((sum, category) => sum + category.length, 0);
                    if(this.viewId !== null && filePath !== file) return;
                    return new NoteItem(`üìÑ ${path.basename(filePath)}`, vscode.TreeItemCollapsibleState.Collapsed, { count: totalRecords, file: filePath, prov: "directories", contextValue: "file" })
                });
                const lines = Object.keys(this.notesData.lines).map(filePath =>{
                    console.log("File path: " + this.viewId + " " + file)
                    if(this.viewId !== null && filePath !== file) return;
                    return new NoteItem(`üìç ${path.basename(filePath)}`, vscode.TreeItemCollapsibleState.Collapsed, {count: this.notesData.lines[filePath].length, lineFile: filePath })
                });
        
                const allItems = [...items, ...directories, ...files, ...lines];
    
                // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (allItems.length === 0) {
                    return [new NoteItem("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π", vscode.TreeItemCollapsibleState.None)];
                }
    
                return allItems;
            }
        
            // –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –Ω–µ–π
            if (element.context.directory) {
                const dirPath =  this.notesData.directories[element.context.directory] || {};
        
                return Object.entries(dirPath)
                    .flatMap(([type, notes]) => 
                        (Array.isArray(notes) ? notes : []).map(note => {
                            note.prov = "directories";
                            const label = note.type === 'checklist' 
                                ? `üìã ${note.content.name || '–ß–µ–∫-–ª–∏—Å—Ç'}`
                                : `${note.type.toUpperCase()}: ${note.content}`;
                            
                            return new NoteItem(label, 
                                note.type === 'checklist' ? vscode.TreeItemCollapsibleState.Collapsed : vscode.TreeItemCollapsibleState.Collapsed, 
                                { ...note, contextValue: note.type === 'checklist' ? 'checklist' : "noteItem", dirpath: element.context.directory }
                            );
                        })
                    );
            }
        
            // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –Ω–µ–º
            if (element.context.file) {
                const fileNotes = this.notesData.files[element.context.file] || {};
    
                return Object.entries(fileNotes)
                    .flatMap(([type, notes]) => 
                        (Array.isArray(notes) ? notes : []).map(note => {
                            const totalItems = note.type == "checklist" ? note.content.items.length : null;
                            const completedItems = note.type == "checklist" ? note.content.items.filter(item => item.done).length : null;
                            const progress = note.type == "checklist" ? totalItems > 0 ? Math.round((completedItems / totalItems) * 100) : 0 : null;
                            const color = note.type == "checklist" ? getProgressColor(progress) : null;
                            note.prov = "files";
                            const label = note.type === 'checklist' 
                                ? `üìã ${note.content.name} (${totalItems}, ${color} ${progress}%)` || 'Checklist'
                                : `${note.type.toUpperCase()}: ${note.content}`;
                            
                            return new NoteItem(label, 
                                note.type === 'checklist' ? vscode.TreeItemCollapsibleState.Collapsed : vscode.TreeItemCollapsibleState.Collapsed, 
                                { ...note, contextValue: note.type === 'checklist' ? "checklist" : "noteItem", filepath: element.context.file}
                            );
                        })
                    );
            }
        
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Ñ–∞–π–ª–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
            if (element.context.lineFile) {
                const filePath = element.context.lineFile;
                
                return this.notesData.lines[filePath].map(note =>
                    new NoteItem(`üìç Line ${note.line}: ${note.content}`, vscode.TreeItemCollapsibleState.Collapsed, { ...note, prov: "lines", path: filePath,  contextValue: "line", linepath: filePath})
                );
            }
    
            // ‚úÖ –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ‚Äî —á–µ–∫-–ª–∏—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –ø—É–Ω–∫—Ç—ã
            if (element.context.type === 'checklist') {
                if (!element.context.content || !element.context.content.items || !Array.isArray(element.context.content.items)) {
                    console.error("‚ùå –û—à–∏–±–∫–∞: —É —á–µ–∫-–ª–∏—Å—Ç–∞ –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ items", element.context);
                    return [new NoteItem("üì≠ –ù–µ—Ç –ø—É–Ω–∫—Ç–æ–≤ –≤ —á–µ–∫-–ª–∏—Å—Ç–µ", vscode.TreeItemCollapsibleState.None)];
                }
                console.log("Checklists",element)
                const filePath = element.context.prov;
            
                return element.context.content.items.map((item, index) => 
                    new NoteItem(
                        item.done ? `‚úÖ ${item.text}` : `‚¨ú ${item.text}`,
                        vscode.TreeItemCollapsibleState.None,
                        { ...item, prov: "directories", path: filePath, checklistId: element.context.id, index, type: element.context.type, contextValue: "checklistItem" }
                    )
                );
            }
            
        
            // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–º–µ—Ç–∫–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            if (element.context.id) {
                return [
                    new NoteItem(`üÜî ID: ${element.context.id}`, vscode.TreeItemCollapsibleState.None),
                    new NoteItem(`üìå Type: ${element.context.type}`, vscode.TreeItemCollapsibleState.None),
                    new NoteItem(`üìù Content: ${element.context.content}`, vscode.TreeItemCollapsibleState.None),
                    new NoteItem(`üìÖ Created: ${new Date(element.context.createdAt).toLocaleString()}`, vscode.TreeItemCollapsibleState.None),
                    element.context?.deadline ? new NoteItem(`üîî Deadline: ${new Date(element.context.deadline).toLocaleString()}`, vscode.TreeItemCollapsibleState.None) : "",
                    ...(element.context.line ? [new NoteItem(`üìç Line: ${element.context.line}`, vscode.TreeItemCollapsibleState.None)] : [])
                ];
            }
    
             // –ï—Å–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
            // if (children.length === 0) {
            //     return [new NoteItem("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π", vscode.TreeItemCollapsibleState.None)];
            // }
        
            return []; // üõë –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        
    }
    
    
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–∫–æ–≤ —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
getFileLabel(filePath) {
    const hasNotes = this.notesData.files[filePath]?.notes.length > 0;
    const hasComments = Object.keys(this.notesData.files[filePath]?.lines || {}).length > 0;
    return `${hasNotes || hasComments ? 'üìù ' : ''}${path.basename(filePath)}`;
}

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–ø–æ–∫
getDirectoryLabel(directoryPath) {
    const hasNotes = this.notesData.directories[directoryPath]?.notes.length > 0;
    return `${hasNotes ? 'üìÇüìù ' : 'üìÇ '}${path.basename(directoryPath)}`;
}

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ—Ç–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —á–µ–∫–ª–∏—Å—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è) –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
extractItemData(item, parent = null) {
    const allCategories = ['notes', 'comments', 'checklists', 'events']; // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    const extractedData = [];

    // –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ—Ç–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ç.–¥.)
    allCategories.forEach(category => {
        if (item[category] && item[category].length > 0) {
            item[category].forEach(entry => {
                extractedData.push({
                    label: `${category.slice(0, 1).toUpperCase()}${category.slice(1)}: ${entry.content}`, // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    type: category.slice(0, -1), // –¢–∏–ø –∑–∞–ø–∏—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "note", "comment", –∏ —Ç.–¥.
                    id: entry.id,
                    content: entry.content,
                    createdAt: entry.createdAt || new Date().toISOString(),
                    parent: parent ? parent.path : null, // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –ø—É—Ç—å
                });
            });
        }
    });

    return extractedData;
}

    getEntries(target, parentPath) {
        if (!target) return [];

        return [
            ...(target.notes || []).map(note => ({
                label: `üìù ${note.content}`,
                type: "note",
                id: note.id,
                parent: parentPath
            })),
            ...(target.comments || []).map(comment => ({
                label: `üí¨ ${comment.content}`,
                type: "comment",
                id: comment.id,
                parent: parentPath
            })),
            ...(target.checklists || []).map(checklist => ({
                label: `‚úÖ ${checklist.content}`,
                type: "checklist",
                id: checklist.id,
                parent: parentPath
            })),
            ...(target.events || []).map(event => ({
                label: `üìÖ ${event.content}`,
                type: "event",
                id: event.id,
                parent: parentPath
            }))
        ];
    }

    searchNotes(query) {
        query = query.toLowerCase().trim();
    
        let results = [];
    
        const searchInCollection = (collection, parentPath = "") => {
            Object.entries(collection).forEach(([path, data]) => {
                const categories = ["notes", "comments", "checklists", "events"];
                categories.forEach(category => {
                    if (Array.isArray(data[category])) {
                        data[category].forEach(note => {
                            if (typeof note.content === "string" && note.content.toLowerCase().includes(query)) {
                                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å: ${note.content}`);  // –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                                results.push(new NoteItem(
                                    `üîç ${category.toUpperCase()}: ${note.content}`,
                                    vscode.TreeItemCollapsibleState.None,
                                    { ...note, parentPath, contextValue: "noteItem" }
                                ));
                            }
    
                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —á–µ–∫–ª–∏—Å—Ç–æ–≤
                            if (category === "checklists" && Array.isArray(note.content.items)) {
                                note.content.items.forEach(item => {
                                    if (item.text.toLowerCase().includes(query)) {
                                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—É–Ω–∫—Ç —á–µ–∫–ª–∏—Å—Ç–∞: ${item.text}`);
                                        results.push(new NoteItem(
                                            `üîç CHECKLIST: ${note.content.name} ‚Üí ${item.text}`,
                                            vscode.TreeItemCollapsibleState.None,
                                            { ...item, checklistId: note.id, index: note.content.items.indexOf(item), parentPath, contextValue: "checklistItem" }
                                        ));
                                    }
                                });
                            }
                        });
                    }
                });
            });
        };
    
        // üîé –ò—â–µ–º –≤ —Ñ–∞–π–ª–∞—Ö, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö –∏ —Å—Ç—Ä–æ–∫–∞—Ö
        searchInCollection(this.notesData.files);
        searchInCollection(this.notesData.directories);
        Object.entries(this.notesData.lines).forEach(([path, notes]) => {
            notes.forEach(note => {
                if (typeof note.content === "string" && note.content.toLowerCase().includes(query)) {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: ${note.content}`);
                    results.push(new NoteItem(
                        `üîç LINE ${note.line}: ${note.content}`,
                        vscode.TreeItemCollapsibleState.None,
                        { ...note, parentPath: path, contextValue: "noteItem" }
                    ));
                }
            });
        });
    
        results.push(new NoteItem(
            "‚ùå –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫", 
            vscode.TreeItemCollapsibleState.None, 
            { contextValue: "resetSearch" }
        ));
    
        console.log(`üîπ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}`);
        
        if (results.length === 0) {
            vscode.window.showInformationMessage("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.");
        }
    
        this.searchResults = results;
        this.search = true;
        this.refresh();  // –û–±–Ω–æ–≤–ª—è–µ–º TreeView —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    }
    
    
    filterNotes(type, category) {
        const results = [];
        console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–∏–ø—É: ${type} –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);
        
        this.selectedType = type;
        this.selectedCategory = category;
        const filterByCategory = (data) => {
            if (!category || category === 'all') return Object.entries(data).flatMap(([key, value]) => Object.entries(value));
            console.log(`üîé –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);
    
            if (category === 'files') return Object.entries(data.files || {});
            if (category === 'directories') return Object.entries(data.directories || {});
            if (category === 'lines') return Object.entries(data.lines || {});
    
            return [];
        };
    
        const typeMap = {
            "notes": "note",
            "comments": "comment",
            "checklists": "checklist",
            "events": "event",
            "lines": "line"
        };
    
        const filterByType = (items) => {
            if (!type || type === 'all') return items;
            const normalizedType = typeMap[type] || type;
            return items.filter(item => item.type === normalizedType);
        };
    
        const categoryFilteredData = filterByCategory(this.notesData);
        console.log(`üìö –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${categoryFilteredData.length}`);
    
        if (!Array.isArray(categoryFilteredData)) {
            console.error("‚ùå –û—à–∏–±–∫–∞: categoryFilteredData –Ω–µ –º–∞—Å—Å–∏–≤!", categoryFilteredData);
            return [];
        }
    
        categoryFilteredData.forEach(([dataPath, data]) => {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å: ${dataPath}`);
    
            if (category === "lines") {
                if (Array.isArray(data)) {
                    const filteredItems = filterByType(data);
                    if (filteredItems.length > 0) {
                        if (!results.some(item => item.contextValue === "lineContainer" && item.label === `üìç ${path.basename(dataPath)}`)) {
                            results.push(new NoteItem(
                                `üìç ${path.basename(dataPath)}`,
                                vscode.TreeItemCollapsibleState.None,
                                { lineFile: dataPath, contextValue: "lineContainer" }
                            ));
                        }
    
                        filteredItems.forEach(note => {
                            results.push(new NoteItem(
                                `üìù LINE ${note.line}: ${note.content}`,
                                vscode.TreeItemCollapsibleState.Collapsed, // –¢–µ–ø–µ—Ä—å –∑–∞–ø–∏—Å—å –º–æ–∂–µ—Ç —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å—Å—è
                                { ...note, parentPath: dataPath, contextValue: "noteItem" }
                            ));
                        });
                    }
                }
                return;
            }
    
            ["notes", "comments", "checklists", "events"].forEach(categoryKey => {
                if (!Array.isArray(data[categoryKey])) return;
                
                const filteredItems = filterByType(data[categoryKey]);
                if (filteredItems.length > 0) {
                    if (!results.some(item => item.contextValue === "directory" && item.label === `üìÅ ${path.basename(dataPath)}`)) {
                        results.push(new NoteItem(
                            `üìÅ ${path.basename(dataPath)}`,
                            vscode.TreeItemCollapsibleState.None,
                            { directory: dataPath, contextValue: "directory" }
                        ));
                    }
    
                    filteredItems.forEach(note => {
                        results.push(new NoteItem(
                            `${categoryKey.toUpperCase()}: ${note.content}`,
                            vscode.TreeItemCollapsibleState.Collapsed, // –¢–µ–ø–µ—Ä—å –∑–∞–ø–∏—Å—å —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è
                            { ...note, parentPath: dataPath, contextValue: "noteItem" }
                        ));
                    });
                }
            });
        });

        // **–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"** 
        results.push(new NoteItem(
            "‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä",
            vscode.TreeItemCollapsibleState.None,
            { contextValue: "resetSearch" }
        ));
    
        return results;
    }


    clearSearch() {
        this.search = false;
        this.searchResults = null;
        this.refresh();
    }
    

    async addNoteToFile(filePath, content, type = "note") {
        if (!this.notesData.files[filePath]) {
            this.notesData.files[filePath] = { notes: [] };
        }
        this.notesData.files[filePath][type + "s"].push({
            id: Date.now(),
            type,
            categories: "file",
            content,
            createdAt: new Date().toISOString()
        });

        await this.saveNotesToFile();
    }

    addNoteToLine(filePath, lineNumber, entryType, noteContent) {
        const typeKey = entryType.toLowerCase() + "s";  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, "comments", "checklists"
        filePath = path.normalize(filePath).replace(/\\/g, "/").toLowerCase() // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, –∏ –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        // if (!this.notesData.files[filePath]) {
        //     this.notesData.files[filePath] = { notes: [], comments: [], checklists: [], events: [], lines: {} };
        // }
    
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø–∏—Å—å, –∏ –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
        if (!this.notesData.lines[filePath]) {
            this.notesData.lines[filePath] = [];
        }

        console.log(noteContent)
    
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç—Ä–æ–∫
        this.notesData.lines[filePath].push({
            line: lineNumber,
            id: Date.now(),
            type: entryType.toLowerCase(),
            content: noteContent,
            createdAt: new Date().toISOString()
        });
    
        this.saveNotesToFile();
    }

    normalizePath(filePath) {
        return path.normalize(filePath).replace(/\\/g, "/").toLowerCase();
    }
    

    refresh() {
        console.log("‚úÖ DEBUG: TreeView –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...");
        this._onDidChangeTreeData.fire();
    }

    async addEntry(targetPath, isDirectory = false, entryType, noteContent, deadline = "false") {
        const typeKey = entryType.toLowerCase() + "s"; // –ü—Ä–∏–º–µ—Ä: "notes", "comments", "checklists", "events"
    
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É
        let target;
        targetPath = this.normalizePath(targetPath)
        if (isDirectory) {
            if (!this.notesData.directories[targetPath]) {
                this.notesData.directories[targetPath] = { notes: [], comments: [], checklists: [], events: [] };
            }
            target = this.notesData.directories[targetPath];
        } else {
            if (!this.notesData.files[targetPath]) {
                this.notesData.files[targetPath] = { notes: [], comments: [], checklists: [], events: [] };
            }
            target = this.notesData.files[targetPath];
        }
    
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        target[typeKey].push({
            id: Date.now(),
            type: entryType.toLowerCase(),
            content: noteContent,  // –ü–µ—Ä–µ–¥–∞–µ–º —Å—é–¥–∞ —Ç–µ–∫—Å—Ç
            createdAt: new Date().toISOString(),
            deadline: deadline
        });
    
        await this.saveNotesToFile();
    }
    
    
    
}
function getProgressColor(percent) {
    if (percent <= 30) return "üî¥"; // –ö—Ä–∞—Å–Ω—ã–π
    if (percent <= 70) return "üü†"; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    return "üü¢"; // –ó–µ–ª–µ–Ω—ã–π
}
class NoteItem extends vscode.TreeItem {
    constructor(label, collapsibleState, context = {}) {
        const settings = getProTaskerSettings()
        let converToTimeago = context?.createdAt ? new Date(context.createdAt).toLocaleString() : "", description = "";
        super(label, collapsibleState);
        this.context = context;
        this.tooltip = context.content || label;
        this.notifiedDeadlines = new Set();
        
        this.contextValue = this.context.contextValue || context.type || "unknown";
        this.dirpath = this.context.dirpath || null
        this.filepath = this.context.filepath || null
        this.linepath = this.context.linepath || null
        if(context.createdAt){
            if(settings.showTimeAgo) converToTimeago = timeago.format(new Date(context.createdAt)) || ""
        }

        description = context?.count ? `(${context.count})` : (`${context.type ? `(${context.type})` : ""} ${converToTimeago}`)
        
        this.description = description;

        console.log(`üìå NoteItem —Å–æ–∑–¥–∞–Ω: ${this.label}, contextValue: ${this.contextValue}`);

        if(settings.notificatons){
            if (context?.deadline) {
                const notifiedDeadlines = this.notifiedDeadlines;
                const deadline = new Date(context.deadline);
                const now = new Date().getTime();
                const diff = deadline.getTime() - now;

                if (diff < 3600000 && diff > 0 && !notifiedDeadlines.has(context.id)) {
                    this.iconPath = new vscode.ThemeIcon("clock", new vscode.ThemeColor("notificationsWarningIcon.foreground"));
                    notifiedDeadlines.add(context.id); // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω–æ–µ
                } else if (diff <= 0 && !notifiedDeadlines.has(context.id)) {
                    this.iconPath = new vscode.ThemeIcon("error", new vscode.ThemeColor("notificationsErrorIcon.foreground"));
                    notifiedDeadlines.add(context.id);
                } else {
                    this.iconPath = new vscode.ThemeIcon("note");
                }
            }
        }
    }
}

// class SettingsItem extends vscode.TreeItem {
//     constructor(){
//         super()
//     }
// }
function playSound( soundLink ) {
    vscode.env.openExternal(soundLink);
}
function getProTaskerSettings(){
    const config = vscode.workspace.getConfiguration('protasker');

    return {
        language: config.get('language'),
        customTypes: config.get('customTypes'),
        noteDisplay: config.get('noteDisplay'),
        highlightColor: config.get('highlightColor'),
        showTimeAgo: config.get('showTimeAgo'),
        notificatons: config.get('notificatons')
    }

}

module.exports = { NotesExplorer };
