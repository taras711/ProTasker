const vscode = require('vscode');
const { Main } = require("./src/main");
const { NotesExplorer } = require('./src/dataManager');
const { NotesExplorerProvider } = require('./src/notesExplorerProvider');
//const { Manager } = require('./src/manager');
const notifier = require('node-notifier');
let notifyInterval = null;

const path = require("path")
const notifiedDeadlines = new Set();
function activate(context) {
    console.log('ProTasker extension activated');
    const main = new Main(context);
    const provider = new NotesExplorer(context);
    const notesExplorerProvider = new NotesExplorerProvider(provider.notesData, context);
    //const notesExplorerProvider = new Manager("notesExplorer");

    const treeView = vscode.window.registerTreeDataProvider('sidebar_protasker_id1', provider);
    let lineHasNoteState = {edit:false, show: false, delete: false, add: true}; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–µ
    
    // const notesExplorerView = vscode.window.registerTreeDataProvider('notesExplorer', notesExplorerProvider);
    const notesExplorerView = vscode.window.registerTreeDataProvider('notesExplorer', notesExplorerProvider);
    context.subscriptions.push(notesExplorerView);

    console.log("üîç –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ onDidChangeActiveTextEditor...", provider.activeDecorationType);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ (–∫—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è)
        vscode.window.onDidChangeTextEditorSelection(async event => {
            await updateLineHasNoteState(event.textEditor, provider);
        });
    if (vscode.window.activeTextEditor) {
        
        console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ...");
        highlightCommentedLines(vscode.window.activeTextEditor, provider);
    }
    
    vscode.window.onDidChangeActiveTextEditor(editor => {
        console.log("üìå –°–º–µ–Ω–∏–ª—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä:", editor?.document?.uri.fsPath || "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞");
    
        if (!editor) {
            setTimeout(() => {
                const activeEditor = vscode.window.activeTextEditor;
                if (activeEditor) {
                    console.log("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏:", activeEditor.document.uri.fsPath);
                    highlightCommentedLines(activeEditor, provider);
                }
            }, 500); // 500 –º—Å –∑–∞–¥–µ—Ä–∂–∫–∞
            return;
        }
    
        notesExplorerProvider.refresh();
        highlightCommentedLines(editor, provider);
    });
    

    vscode.workspace.onDidChangeConfiguration(event => {
        if (event.affectsConfiguration('protasker')) {
            console.log("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º UI...");
    
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è inlineText
            const settings = vscode.workspace.getConfiguration('protasker');
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            provider.refresh();
            updateNotifications(provider);
        }
    });
    
    

    // üî• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    vscode.window.onDidChangeVisibleTextEditors(async () => {
         if (vscode.window.activeTextEditor) {
            
            updateLineHasNoteState(vscode.window.activeTextEditor, provider)
        }
    });
    
    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–ª–∏ —Ñ–∞–π–ª, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    vscode.workspace.onDidOpenTextDocument(doc => {
        const editor = vscode.window.activeTextEditor;
        if (editor && editor.document.uri.fsPath === doc.uri.fsPath) {
            
            highlightCommentedLines(editor, provider);
        }
    });

    async function updateLineHasNoteState(editor, provider) {
        if (!editor) return;

            console.time("‚è≥ setContext –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
            console.log(`üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ setContext: protasker.deleteNoteFromLine = `, JSON.stringify(lineHasNoteState));
            //await new Promise(resolve => setTimeout(resolve, 500));
            await lineHasNote();
            await vscode.commands.executeCommand('setContext', 'protasker.deleteNoteFromLine', lineHasNoteState.delete)
            await vscode.commands.executeCommand('setContext', 'protasker.openComment', lineHasNoteState.show)
            await vscode.commands.executeCommand('setContext', 'protasker.editNote', lineHasNoteState.edit)
            await vscode.commands.executeCommand('setContext', 'protasker.addNoteToLine', lineHasNoteState.add)
              // ‚è≥ –ñ–¥–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –º–µ–Ω—é
            //await new Promise(resolve => setTimeout(resolve, 100));

            //await vscode.commands.executeCommand('editor.action.showContextMenu'); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
            console.timeEnd("‚è≥ setContext –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
            console.log("‚úÖ setContext –æ–±–Ω–æ–≤–ª—ë–Ω!");
    }

    async function lineHasNote() {
        const editor = vscode.window.activeTextEditor;
        if (!editor) return false;
    
        const lineNumber = editor.selection.active.line + 1; // –°—Ç—Ä–æ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ–∏—Ç –∫—É—Ä—Å–æ—Ä
        const filePath = path.normalize(editor.document.uri.fsPath).replace(/\\/g, "/").toLowerCase(); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å —Ñ–∞–π–ª–∞
    
        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Ñ–∞–π–ª–∞: ${filePath}, —Å—Ç—Ä–æ–∫–∞: ${lineNumber}`);
    
        const notesForFile = await provider.notesData.lines[filePath] || [];  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞
        const notesOnLine = await notesForFile.filter(note => note.line === lineNumber);  // –ò—â–µ–º –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ

        let newstate = await notesOnLine.length > 0 ? true : false;
        lineHasNoteState.edit = newstate;
        lineHasNoteState.delete = newstate;
        lineHasNoteState.show = newstate;
        lineHasNoteState.add = newstate ? false : true;
        return newstate;  // –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∏ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
        
    }

    main.comands([
        'openSettings',
        'addNote',
        'addChecklistItem',
        'toggleChecklistItem',
        'removeChecklistItem',
        'deleteNote',
        'openComment',
        'addNoteToLine',
        'editNote',
        'deleteNoteFromList',
        'editNoteFromList',
        'searchNotes',
        'resetSearch',
        'filterNotes',
        'goToNote',
        'goToFile',
        'deleteAll',
    ]);

    main.set('openSettings', () => {
        vscode.commands.executeCommand('workbench.action.openSettings', 'protasker');
    });

    main.set('addNote', async () => {
        const editor = vscode.window.activeTextEditor;
        const settings = getProTaskerSettings();
        let deadline = null;

        // 1Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏
        const entryType = await vscode.window.showQuickPick(['Note', 'Comment', 'Checklist', 'Event', ...settings.customTypes], {
            placeHolder: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏'
        });
    
        if (!entryType) return;
    
        // 2Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        const selection = await vscode.window.showQuickPick(['File', 'Directory'], {
            placeHolder: '–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å'
        });
    
        if (!selection) return;
        
        // 4Ô∏è‚É£ –ï—Å–ª–∏ —ç—Ç–æ —á–µ–∫-–ª–∏—Å—Ç –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω
        if (entryType === 'Checklist' || entryType === 'Event') {
            const wantsDeadline = await vscode.window.showQuickPick(['–î–∞', '–ù–µ—Ç'], {
                placeHolder: '–î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω?'
            });

            if (wantsDeadline === '–î–∞') {
                deadline = await vscode.window.showInputBox({ placeHolder: '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD HH:MM)' });
                if (deadline) {
                    const parsedDate = new Date(deadline);
                    if (isNaN(parsedDate.getTime())) {
                        vscode.window.showErrorMessage('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM');
                        return;
                    }
                    deadline = parsedDate.toISOString();
                    console.log(deadline)
                }
            }
        }

        let filePath = await getTargetPath(selection);
        if (!filePath){  
            vscode.window.showErrorMessage("No active editor.");
            return
        };
    
        // 3Ô∏è‚É£ –ï—Å–ª–∏ —ç—Ç–æ —á–µ–∫-–ª–∏—Å—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É–Ω–∫—Ç—ã
        if (entryType === 'Checklist') {
            let checklistItems = [];
            let addMore = true;

            const name = await vscode.window.showInputBox({placeHolder: 'Checklist name'});

            if (!name) return;
    
            while (addMore) {
                const item = await vscode.window.showInputBox({ placeHolder: '–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)' });
                if (!item) break;
                checklistItems.push({ text: item, done: false });
    
                addMore = await vscode.window.showQuickPick(['–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë', '–ó–∞–≤–µ—Ä—à–∏—Ç—å'], { placeHolder: '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø—É–Ω–∫—Ç?' }) === '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë';
            }
    
            if (checklistItems.length === 0) return;
    
            const checklistEntry = {
                id: Date.now(),
                name: name,
                type: 'checklist',
                items: checklistItems,
                createdAt: new Date().toISOString(),
                deadline: deadline
            };
    
            await provider.addEntry(filePath, selection === 'Directory', 'checklist', checklistEntry);
        } else {
            // 4Ô∏è‚É£ –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ ‚Äî –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            const noteContent = await vscode.window.showInputBox({ placeHolder: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏' });
            if (!noteContent) return;
    
            if (selection === 'File') {
                await provider.addEntry(filePath, false, entryType.toLowerCase(), noteContent, deadline);
            } else if (selection === 'Directory') {
                await provider.addEntry(filePath, true, entryType.toLowerCase(), noteContent, deadline);
            } else if (selection === 'Line') {
                const lineNumber = editor ? editor.selection.active.line + 1 : 0;
                await provider.addNoteToLine(filePath, lineNumber, entryType.toLowerCase(), noteContent);
            }
        }
        provider.refresh();
        notesExplorerProvider.refresh();
    
        highlightCommentedLines(editor, provider);
    });

    main.set('addChecklistItem', async (treeItem) => {
        if (!treeItem || treeItem.context.type !== "checklist") return;

        const newItemText = await vscode.window.showInputBox({ placeHolder: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç' });
        if (!newItemText) return;
        console.log("üóë –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ–∫–ª–∏—Å—Ç–∞:", treeItem);
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç –≤ —á–µ–∫-–ª–∏—Å—Ç
        treeItem.context.content.items.push({ text: newItemText, done: false });
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ provider
            await provider.saveNotesToFile();

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            provider.refresh();
            notesExplorerProvider.refresh();

            vscode.window.showInformationMessage(`‚úÖ –ü—É–Ω–∫—Ç "${newItemText}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ–∫-–ª–∏—Å—Ç!`);
        } catch (error) {
            vscode.window.showErrorMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message}`);
        }
    });

    main.set('toggleChecklistItem', async (treeItem) => {
        treeItem.data = treeItem?.data ? treeItem.data : treeItem.context;
        if (!treeItem || typeof treeItem.data.done === "undefined") {
            console.log("‚ùå –û—à–∏–±–∫–∞: treeItem –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ done –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", treeItem);
            return;
        }
        // –ü–æ–ª—É—á–∞–µ–º filePath —á–µ—Ä–µ–∑ findChecklistFilePath
        const filePath = findChecklistFilePath(treeItem.data.checklistId, treeItem.data.path);
        if (!filePath) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞ ${treeItem.data.checklistId}`);
            return;
        }
    
        console.log("üìÇ –ù–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
    
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ notesData
        const fileNotes = provider.notesData[treeItem.data.path][filePath];
        if (!fileNotes) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ notesData.files`);
            return;
        }
    
        console.log("üìÇ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª:", fileNotes);
    
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–µ–∫-–ª–∏—Å—Ç—ã
        if (!Array.isArray(fileNotes.checklists)) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ ${filePath} –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤`);
            return;
        }
    
        console.log("üìå –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã:", fileNotes.checklists);
    
        // –ò—â–µ–º —á–µ–∫-–ª–∏—Å—Ç –ø–æ ID
        const checklistIndex = fileNotes.checklists.findIndex(cl => cl.id === treeItem.data.checklistId);
        if (checklistIndex === -1) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: –ß–µ–∫-–ª–∏—Å—Ç —Å ID ${treeItem.data.checklistId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
    
        console.log("‚úÖ –ù–∞–π–¥–µ–Ω —á–µ–∫-–ª–∏—Å—Ç:", fileNotes.checklists[checklistIndex]);
    
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ `items`
        if (!Array.isArray(fileNotes.checklists[checklistIndex].content.items)) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: –í —á–µ–∫-–ª–∏—Å—Ç–µ ${treeItem.data.checklistId} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ items`);
            return;
        }
    
        // –ò—â–µ–º –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞
        const checklistItemIndex = fileNotes.checklists[checklistIndex].content.items.findIndex(item => item.text === treeItem.data.text);
        if (checklistItemIndex === -1) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: –ü—É–Ω–∫—Ç '${treeItem.data.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ–∫-–ª–∏—Å—Ç–µ`);
            return;
        }
    
        console.log("‚úèÔ∏è –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—É–Ω–∫—Ç–∞:", fileNotes.checklists[checklistIndex].content.items[checklistItemIndex]);
    
        // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞
        fileNotes.checklists[checklistIndex].content.items[checklistItemIndex].done = !fileNotes.checklists[checklistIndex].content.items[checklistItemIndex].done;
    
        console.log("‚úÖ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞:", fileNotes.checklists[checklistIndex].content.items[checklistItemIndex]);
    
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ provider.notesData
        provider.notesData[treeItem.data.path][filePath] = { ...fileNotes };
    
        console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ provider.notesData:", provider.notesData);


    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            provider.saveNotesToFile();
    
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            provider.refresh();
            notesExplorerProvider.refresh();

            // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ
            vscode.window.showInformationMessage(`üîÑ –ü—É–Ω–∫—Ç "${treeItem.data.text}" —Ç–µ–ø–µ—Ä—å ${treeItem.data.done ? "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚ùå" : "–≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ"}`);
    });

    main.set('removeChecklistItem', async (item) => {
        console.log("items:", item)
        if (!item || !item.context.checklistId || item.context.index === undefined) {
            vscode.window.showErrorMessage("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
            return;
        }

        const confirm = await vscode.window.showWarningMessage(`–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ ${item.context.text}?`, "–î–∞", "–ù–µ—Ç");
        if (confirm !== "–î–∞") return;

        console.log("üóë –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ–∫–ª–∏—Å—Ç–∞:", item);

        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è —á–µ–∫–ª–∏—Å—Ç
        const filePath = findChecklistFilePath(item.context.checklistId, item.context.path);
        if (!filePath) {
            vscode.window.showErrorMessage("‚ùå –§–∞–π–ª —Å —á–µ–∫–ª–∏—Å—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–ª–∏—Å—Ç–∞
        const checklist = provider.notesData[item.context.path][filePath].checklists.find(cl => cl.id === item.context.checklistId);
        if (!checklist) {
            vscode.window.showErrorMessage("‚ùå –ß–µ–∫–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —á–µ–∫–ª–∏—Å—Ç–∞
        checklist.content.items.splice(item.context.index, 1);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç
        await provider.saveNotesToFile();
        provider.refresh();
        notesExplorerProvider.refresh();
        vscode.window.showInformationMessage("‚úÖ –≠–ª–µ–º–µ–Ω—Ç —á–µ–∫–ª–∏—Å—Ç–∞ —É–¥–∞–ª–µ–Ω.");
    });

    main.set('deleteNote', async (treeItem) => {
        const editor = vscode.window.activeTextEditor;
        console.log("–£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É", treeItem);
        const filePath = treeItem.parent || treeItem.path;
        if (!filePath) {
            console.error("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return;
        }

        const confirm = await vscode.window.showWarningMessage("–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞?", "–î–∞", "–ù–µ—Ç");
        if (confirm !== "–î–∞") return;

        const isDirectory = provider.notesData.directories[filePath] !== undefined;
        const target = isDirectory ? provider.notesData.directories[filePath] : provider.notesData.files[filePath];
        
        if (!target || !target.notes) {
            console.error("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª–µ/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", filePath);
            return;
        }

        const noteIndex = target.notes.findIndex(n => n.content.trim() === treeItem.label.trim());
        if (noteIndex === -1) {
            console.error("–û—à–∏–±–∫–∞: –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", treeItem.label);
            return;
        }

        target.notes.splice(noteIndex, 1);
        await provider.saveNotesToFile();
        
        highlightCommentedLines(editor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
        provider.refresh();
        notesExplorerProvider.refresh();
    });

    main.set('openComment', () => {
        const editor = vscode.window.activeTextEditor;
        if (!editor) {
            vscode.window.showErrorMessage("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.");
            return;
        }

        let filePath = path.normalize(editor.document.uri.fsPath).replace(/\\/g, "/").toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –ø—É—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç notesData.json path.normalize(originalPath).replace(/\\/g, "/").toLowerCase();
        const line = editor.selection.active.line +1; // VS Code —Å—á–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å 0, –ø–æ—ç—Ç–æ–º—É +1

        console.log(`üìå –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è: ${filePath}, —Å—Ç—Ä–æ–∫–∞: ${line}`);
        console.log(`üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ notesData.json:`, Object.keys(provider.notesData.lines));

        if (!provider.notesData.lines[filePath]) {
            vscode.window.showErrorMessage("‚ùå –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –∑–∞–º–µ—Ç–æ–∫.");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–∞–π–ª–∞
        const allNotes = provider.notesData.lines[filePath] || [];
        console.log(`üìå –ù–∞–π–¥–µ–Ω–æ ${allNotes.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–∞–π–ª–∞:`, allNotes);

        // üõ† –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
        const lineNotes = allNotes.filter(note => {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å: ${note.line} - ${line}`, note);
            return note.line === line && typeof note.content === "string" && note.content.trim().length > 0;
        });

        console.log(`üìå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${line}:`, lineNotes);

        if (lineNotes.length === 0) {
            vscode.window.showInformationMessage("üì≠ –î–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.");
            return;
        }

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        const fullText = lineNotes.map((note, index) => `Type: ${note.type}* \r\n Content: ${note.content}. \r\n Created: ${note.createdAt}`).join("\n\n");

        vscode.window.showInformationMessage(`üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${line}:\n\n${fullText}`, { modal: true });
    });

    main.set('addNoteToLine', async () => {
        const editor = vscode.window.activeTextEditor;
        if (!editor) return;
    
        const noteContent = await vscode.window.showInputBox({
            placeHolder: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏'
        });
    
        if (noteContent) {
            const lineNumber = editor.selection.active.line + 1;  // –°—Ç—Ä–æ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–º–µ—Ç–∫–∞
            const filePath = editor.document.uri.fsPath;  // –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É
    
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –Ω–∞ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            provider.addNoteToLine(filePath, lineNumber, "line", noteContent); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
            highlightCommentedLines(editor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
            notesExplorerProvider.refresh();
        }
    });

    main.set('editNote', async () => {
        const editor = vscode.window.activeTextEditor;
        if (!editor) return;
    
        const lineNumber = editor.selection.active.line + 1;  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É
        const filePath = path.normalize(editor.document.uri.fsPath).replace(/\\/g, "/").toLowerCase();
    
        if (!lineHasNote()) {
            vscode.window.showInformationMessage("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.");
            return;
        }
    
        const notesForFile = provider.notesData.lines[filePath] || [];
        const notesOnLine = notesForFile.filter(note => note.line === lineNumber);
    
        if (notesOnLine.length === 0) {
            vscode.window.showInformationMessage("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.");
            return;
        }
    
        const noteToEdit = notesOnLine[0];  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ
        const editedContent = await vscode.window.showInputBox({
            value: noteToEdit.content,
            placeHolder: "–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∑–∞–º–µ—Ç–∫—É"
        });
        console.log(`—Å—Ç—Ä–æ–∫–∞: ${lineNumber}, –∑–∞–ø–∏—Å—å: ${noteToEdit.content} `)
    
        if (editedContent) {
            noteToEdit.content = editedContent;
            await provider.saveNotesToFile();
            provider.refresh();
            notesExplorerProvider.refresh()
            vscode.window.showInformationMessage("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.");
        }
        highlightCommentedLines(editor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    });

    main.set('deleteNoteFromList', async (treeItem) => {
        treeItem.data = treeItem?.data ? treeItem.data : treeItem.context;
        const settings = getProTaskerSettings();
        console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", treeItem);
        if (!treeItem || !treeItem.data || !treeItem.data.id) {
            console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", treeItem);
            vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
            return;
        }
    
        const confirm = await vscode.window.showWarningMessage(`–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ${treeItem.data.content} ?`, "–î–∞", "–ù–µ—Ç");
        if (confirm !== "–î–∞") return;
    
        const customTypes = settings.customTypes.map(item => (item + "s").toLowerCase());
    
        const { id, type, prov, path, linepath } = treeItem.data;
        let targetCollection = null;
        let targetKey = null;
        let stillExists = true;

        if (path || treeItem.context.path || treeItem.context.dirpath || treeItem.context.filepath) {
            targetCollection = provider.notesData[prov];
            targetKey = path || treeItem.context.path || treeItem.context.dirpath || treeItem.context.filepath;
        }
        if (!targetCollection || !targetKey || !targetCollection[targetKey]) {
            vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å.");
            return;
        }
    
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è ${targetKey} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`);
    
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        let categories = ["comments", "checklists", "events", "notes", ...customTypes];

        if(type == "line"){
            if (targetCollection[targetKey].length){
                targetCollection[targetKey] = targetCollection[targetKey].filter(note => note.id !== id)
            }

            stillExists = targetCollection[targetKey] && targetCollection[targetKey].length > 0
        }else{
            categories.forEach(category => {
                if (targetCollection[targetKey][category]) {
                    targetCollection[targetKey][category] = targetCollection[targetKey][category].filter(note => note.id !== id);
                }
            });

            // **–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ**
            stillExists = categories.some(category =>
                targetCollection[targetKey][category] && targetCollection[targetKey][category].length > 0
            );
        }
        
    
        
    
        if (!stillExists) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ all: id=${id}, type=${type}`);
            delete targetCollection[targetKey];
        } else {
            console.log(`‚úÖ ${targetKey} –ù–ï –ø—É—Å—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º.`);
        }
    
        provider.saveNotesToFile();
        provider.refresh();
        notesExplorerProvider.refresh();
        highlightCommentedLines(vscode.window.activeTextEditor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
        vscode.window.showInformationMessage("‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω.");
    });

    main.set('editNoteFromList', async (treeItem) => {
        treeItem.data = treeItem?.data ? treeItem.data : treeItem.context;
        const settings = getProTaskerSettings();
        if (!treeItem || !treeItem.data || !treeItem.data.id) {
            console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è!", treeItem);
            vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.");
            return;
        }
        const { id, type, prov, path, linepath } = treeItem.data;
        let targetCollection = null;
        let targetKey = null;
        let targetEntry = null;

        const customTypes = settings.customTypes.map(item => (item + "s").toLowerCase())
    
        if (path || treeItem.context.path || treeItem.context.dirpath || treeItem.context.filepath) {
            targetCollection = provider.notesData[prov];
            targetKey = path || treeItem.context.path || treeItem.context.dirpath || treeItem.context.filepath;
        }
        if (!targetCollection || !targetKey || !targetCollection[targetKey]) {
            vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å.");
            console.log("Warning: " + targetCollection + " " + targetKey)
            return;
        }

        if (prov == "lines") {
            // üîπ –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Ñ–∞–π–ª–∞ (lines), –∏—â–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ –º–∞—Å—Å–∏–≤–µ
            targetEntry = targetCollection[targetKey].find(note => note.id === id);
        } else {
            // üîπ –î–ª—è —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏—â–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö (notes, comments, checklists, events)
            const categories = ["notes", "comments", "checklists", "events", ...customTypes];
            for (const category of categories) {
                if (Array.isArray(targetCollection[targetKey][category])) {
                    targetEntry = targetCollection[targetKey][category].find(note => note.id === id);
                    if (targetEntry) break;
                }
            }
        }
    
        if (!targetEntry) {
            vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }
    
        // –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newText = await vscode.window.showInputBox({
            placeHolder: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏',
            value: targetEntry.content
        });
    
        if (!newText || newText.trim() === "") {
            vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }
    
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        targetEntry.content = newText;
    
        console.log(`‚úèÔ∏è –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: id=${id}, type=${type}, newContent="${newText}"`);
        vscode.window.showInformationMessage("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
    
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        provider.saveNotesToFile();
        provider.refresh();
        notesExplorerProvider.refresh();
        highlightCommentedLines(vscode.window.activeTextEditor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    });

    // vscode.commands.registerCommand('protasker.openSettings', () => {
    //     vscode.commands.executeCommand('workbench.action.openSettings', 'protasker');
    // });
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    // context.subscriptions.push(vscode.commands.registerCommand('protasker.addNote', async () => {
    //     const editor = vscode.window.activeTextEditor;
    //     const settings = getProTaskerSettings();
    //     let deadline = null;

    //     // 1Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏
    //     const entryType = await vscode.window.showQuickPick(['Note', 'Comment', 'Checklist', 'Event', ...settings.customTypes], {
    //         placeHolder: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏'
    //     });
    
    //     if (!entryType) return;
    
    //     // 2Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    //     const selection = await vscode.window.showQuickPick(['File', 'Directory'], {
    //         placeHolder: '–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å'
    //     });
    
    //     if (!selection) return;
        
    //     // 4Ô∏è‚É£ –ï—Å–ª–∏ —ç—Ç–æ —á–µ–∫-–ª–∏—Å—Ç –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω
    //     if (entryType === 'Checklist' || entryType === 'Event') {
    //         const wantsDeadline = await vscode.window.showQuickPick(['–î–∞', '–ù–µ—Ç'], {
    //             placeHolder: '–î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω?'
    //         });

    //         if (wantsDeadline === '–î–∞') {
    //             deadline = await vscode.window.showInputBox({ placeHolder: '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD HH:MM)' });
    //             if (deadline) {
    //                 const parsedDate = new Date(deadline);
    //                 if (isNaN(parsedDate.getTime())) {
    //                     vscode.window.showErrorMessage('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM');
    //                     return;
    //                 }
    //                 deadline = parsedDate.toISOString();
    //                 console.log(deadline)
    //             }
    //         }
    //     }

    //     let filePath = await getTargetPath(selection);
    //     if (!filePath){  
    //         vscode.window.showErrorMessage("No active editor.");
    //         return
    //     };
    
    //     // 3Ô∏è‚É£ –ï—Å–ª–∏ —ç—Ç–æ —á–µ–∫-–ª–∏—Å—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É–Ω–∫—Ç—ã
    //     if (entryType === 'Checklist') {
    //         let checklistItems = [];
    //         let addMore = true;

    //         const name = await vscode.window.showInputBox({placeHolder: 'Checklist name'});

    //         if (!name) return;
    
    //         while (addMore) {
    //             const item = await vscode.window.showInputBox({ placeHolder: '–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)' });
    //             if (!item) break;
    //             checklistItems.push({ text: item, done: false });
    
    //             addMore = await vscode.window.showQuickPick(['–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë', '–ó–∞–≤–µ—Ä—à–∏—Ç—å'], { placeHolder: '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø—É–Ω–∫—Ç?' }) === '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë';
    //         }
    
    //         if (checklistItems.length === 0) return;
    
    //         const checklistEntry = {
    //             id: Date.now(),
    //             name: name,
    //             type: 'checklist',
    //             items: checklistItems,
    //             createdAt: new Date().toISOString(),
    //             deadline: deadline
    //         };
    
    //         await provider.addEntry(filePath, selection === 'Directory', 'checklist', checklistEntry);
    //     } else {
    //         // 4Ô∏è‚É£ –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ ‚Äî –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    //         const noteContent = await vscode.window.showInputBox({ placeHolder: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏' });
    //         if (!noteContent) return;
    
    //         if (selection === 'File') {
    //             await provider.addEntry(filePath, false, entryType.toLowerCase(), noteContent, deadline);
    //         } else if (selection === 'Directory') {
    //             await provider.addEntry(filePath, true, entryType.toLowerCase(), noteContent, deadline);
    //         } else if (selection === 'Line') {
    //             const lineNumber = editor ? editor.selection.active.line + 1 : 0;
    //             await provider.addNoteToLine(filePath, lineNumber, entryType.toLowerCase(), noteContent);
    //         }
    //     }
    //     provider.refresh();
    //     notesExplorerProvider.refresh();
    
    //     highlightCommentedLines(editor, provider);
    // }));

    // context.subscriptions.push(vscode.commands.registerCommand('protasker.addChecklistItem', async (treeItem) => {
    //     if (!treeItem || treeItem.data.type !== "checklist") return;

    //     const newItemText = await vscode.window.showInputBox({ placeHolder: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç' });
    //     if (!newItemText) return;
    //     console.log("üóë –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ–∫–ª–∏—Å—Ç–∞:", treeItem);
    //     // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç –≤ —á–µ–∫-–ª–∏—Å—Ç
    //     treeItem.data.content.items.push({ text: newItemText, done: false });
        
    //     try {
    //         // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ provider
    //         await provider.saveNotesToFile();

    //         // –û–±–Ω–æ–≤–ª—è–µ–º UI
    //         provider.refresh();
    //         notesExplorerProvider.refresh();

    //         vscode.window.showInformationMessage(`‚úÖ –ü—É–Ω–∫—Ç "${newItemText}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ–∫-–ª–∏—Å—Ç!`);
    //     } catch (error) {
    //         vscode.window.showErrorMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message}`);
    //     }
    // }));
    
    // context.subscriptions.push(vscode.commands.registerCommand('protasker.toggleChecklistItem', async (treeItem) => {
        
    //     treeItem.data = treeItem?.data ? treeItem.data : treeItem.context;
    //     if (!treeItem || typeof treeItem.data.done === "undefined") {
    //         console.log("‚ùå –û—à–∏–±–∫–∞: treeItem –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ done –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", treeItem);
    //         return;
    //     }
    //     // –ü–æ–ª—É—á–∞–µ–º filePath —á–µ—Ä–µ–∑ findChecklistFilePath
    //     const filePath = findChecklistFilePath(treeItem.data.checklistId, treeItem.data.path);
    //     if (!filePath) {
    //         console.log(`‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞ ${treeItem.data.checklistId}`);
    //         return;
    //     }
    
    //     console.log("üìÇ –ù–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:", filePath);
    
    //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ notesData
    //     const fileNotes = provider.notesData[treeItem.data.path][filePath];
    //     if (!fileNotes) {
    //         console.log(`‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ notesData.files`);
    //         return;
    //     }
    
    //     console.log("üìÇ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª:", fileNotes);
    
    //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–µ–∫-–ª–∏—Å—Ç—ã
    //     if (!Array.isArray(fileNotes.checklists)) {
    //         console.log(`‚ùå –û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ ${filePath} –Ω–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤`);
    //         return;
    //     }
    
    //     console.log("üìå –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã:", fileNotes.checklists);
    
    //     // –ò—â–µ–º —á–µ–∫-–ª–∏—Å—Ç –ø–æ ID
    //     const checklistIndex = fileNotes.checklists.findIndex(cl => cl.id === treeItem.data.checklistId);
    //     if (checklistIndex === -1) {
    //         console.log(`‚ùå –û—à–∏–±–∫–∞: –ß–µ–∫-–ª–∏—Å—Ç —Å ID ${treeItem.data.checklistId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    //         return;
    //     }
    
    //     console.log("‚úÖ –ù–∞–π–¥–µ–Ω —á–µ–∫-–ª–∏—Å—Ç:", fileNotes.checklists[checklistIndex]);
    
    //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ `items`
    //     if (!Array.isArray(fileNotes.checklists[checklistIndex].content.items)) {
    //         console.log(`‚ùå –û—à–∏–±–∫–∞: –í —á–µ–∫-–ª–∏—Å—Ç–µ ${treeItem.data.checklistId} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ items`);
    //         return;
    //     }
    
    //     // –ò—â–µ–º –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞
    //     const checklistItemIndex = fileNotes.checklists[checklistIndex].content.items.findIndex(item => item.text === treeItem.data.text);
    //     if (checklistItemIndex === -1) {
    //         console.log(`‚ùå –û—à–∏–±–∫–∞: –ü—É–Ω–∫—Ç '${treeItem.data.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ–∫-–ª–∏—Å—Ç–µ`);
    //         return;
    //     }
    
    //     console.log("‚úèÔ∏è –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—É–Ω–∫—Ç–∞:", fileNotes.checklists[checklistIndex].content.items[checklistItemIndex]);
    
    //     // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞
    //     fileNotes.checklists[checklistIndex].content.items[checklistItemIndex].done = !fileNotes.checklists[checklistIndex].content.items[checklistItemIndex].done;
    
    //     console.log("‚úÖ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—É–Ω–∫—Ç–∞:", fileNotes.checklists[checklistIndex].content.items[checklistItemIndex]);
    
    //     // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ provider.notesData
    //     provider.notesData[treeItem.data.path][filePath] = { ...fileNotes };
    
    //     console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ provider.notesData:", provider.notesData);


    // // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    //         provider.saveNotesToFile();
    
    //         // –û–±–Ω–æ–≤–ª—è–µ–º UI
    //         provider.refresh();
    //         notesExplorerProvider.refresh();

    //         // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ
    //         vscode.window.showInformationMessage(`üîÑ –ü—É–Ω–∫—Ç "${treeItem.data.text}" —Ç–µ–ø–µ—Ä—å ${treeItem.data.done ? "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚ùå" : "–≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ"}`);

    
        
    // }));
    
    // context.subscriptions.push(
    //     vscode.commands.registerCommand("protasker.removeChecklistItem", async (item) => {
    //         //console.log(item)
    //         if (!item || !item.data.checklistId || item.data.index === undefined) {
    //             vscode.window.showErrorMessage("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
    //             return;
    //         }

    //         const confirm = await vscode.window.showWarningMessage("–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞?", "–î–∞", "–ù–µ—Ç");
    //         if (confirm !== "–î–∞") return;
    
    //         console.log("üóë –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ–∫–ª–∏—Å—Ç–∞:", item);
    
    //         // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è —á–µ–∫–ª–∏—Å—Ç
    //         const filePath = findChecklistFilePath(item.data.checklistId, item.data.path);
    //         if (!filePath) {
    //             vscode.window.showErrorMessage("‚ùå –§–∞–π–ª —Å —á–µ–∫–ª–∏—Å—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    //             return;
    //         }
    
    //         // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–ª–∏—Å—Ç–∞
    //         const checklist = provider.notesData[item.data.path][filePath].checklists.find(cl => cl.id === item.data.checklistId);
    //         if (!checklist) {
    //             vscode.window.showErrorMessage("‚ùå –ß–µ–∫–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    //             return;
    //         }
    //         // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —á–µ–∫–ª–∏—Å—Ç–∞
    //         checklist.content.items.splice(item.index, 1);
    
    //         // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —á–µ–∫–ª–∏—Å—Ç
    //         await provider.saveNotesToFile();
    //         provider.refresh();
    //         notesExplorerProvider.refresh();
    //         vscode.window.showInformationMessage("‚úÖ –≠–ª–µ–º–µ–Ω—Ç —á–µ–∫–ª–∏—Å—Ç–∞ —É–¥–∞–ª–µ–Ω.");
    //     })
    // );
    
    function findChecklistFilePath(checklistId, type = "files") {
        //const editor = vscode.window.activeTextEditor;
        const file = provider.notesData[type];
        
        
        for (const filePath in file) {
            const normalizedPath = filePath.toLowerCase()
            
            const fileData = file[filePath];
            if (fileData.checklists) {
                const checklist = fileData.checklists.find(cl => cl.id === checklistId);
                if (checklist) {
                    return filePath;
                }
            }
        }
        return null;
    }


    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
    // context.subscriptions.push(vscode.commands.registerCommand('protasker.deleteNote', async (treeItem) => {
    //     const editor = vscode.window.activeTextEditor;
    //     console.log("–£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É", treeItem);
    //     const filePath = treeItem.parent || treeItem.path;
    //     if (!filePath) {
    //         console.error("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    //         return;
    //     }

    //     const confirm = await vscode.window.showWarningMessage("–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç —á–µ–∫-–ª–∏—Å—Ç–∞?", "–î–∞", "–ù–µ—Ç");
    //     if (confirm !== "–î–∞") return;

    //     const isDirectory = provider.notesData.directories[filePath] !== undefined;
    //     const target = isDirectory ? provider.notesData.directories[filePath] : provider.notesData.files[filePath];
        
    //     if (!target || !target.notes) {
    //         console.error("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª–µ/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", filePath);
    //         return;
    //     }

    //     const noteIndex = target.notes.findIndex(n => n.content.trim() === treeItem.label.trim());
    //     if (noteIndex === -1) {
    //         console.error("–û—à–∏–±–∫–∞: –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", treeItem.label);
    //         return;
    //     }

    //     target.notes.splice(noteIndex, 1);
    //     await provider.saveNotesToFile();
        
    //     highlightCommentedLines(editor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    //     provider.refresh();
    //     notesExplorerProvider.refresh();
        
    // }));

    // context.subscriptions.push(vscode.commands.registerCommand("protasker.openComment", async () => {
    //     const editor = vscode.window.activeTextEditor;
    // if (!editor) {
    //     vscode.window.showErrorMessage("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.");
    //     return;
    // }

    // let filePath = path.normalize(editor.document.uri.fsPath).replace(/\\/g, "/").toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –ø—É—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç notesData.json path.normalize(originalPath).replace(/\\/g, "/").toLowerCase();
    // const line = editor.selection.active.line +1; // VS Code —Å—á–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å 0, –ø–æ—ç—Ç–æ–º—É +1

    // console.log(`üìå –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è: ${filePath}, —Å—Ç—Ä–æ–∫–∞: ${line}`);
    // console.log(`üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ notesData.json:`, Object.keys(provider.notesData.lines));

    // if (!provider.notesData.lines[filePath]) {
    //     vscode.window.showErrorMessage("‚ùå –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –∑–∞–º–µ—Ç–æ–∫.");
    //     return;
    // }

    // // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–∞–π–ª–∞
    // const allNotes = provider.notesData.lines[filePath] || [];
    // console.log(`üìå –ù–∞–π–¥–µ–Ω–æ ${allNotes.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–∞–π–ª–∞:`, allNotes);

    // // üõ† –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
    // const lineNotes = allNotes.filter(note => {
    //     console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å: ${note.line} - ${line}`, note);
    //     return note.line === line && typeof note.content === "string" && note.content.trim().length > 0;
    // });

    // console.log(`üìå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${line}:`, lineNotes);

    // if (lineNotes.length === 0) {
    //     vscode.window.showInformationMessage("üì≠ –î–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.");
    //     return;
    // }

    // // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
    // const fullText = lineNotes.map((note, index) => `Type: ${note.type}* \r\n Content: ${note.content}. \r\n Created: ${note.createdAt}`).join("\n\n");

    // vscode.window.showInformationMessage(`üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${line}:\n\n${fullText}`, { modal: true });
    // }));

    function highlightCommentedLines(editor, provider) {
        if (!editor || !editor.document) {
            console.warn("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞!");
            return;
        }
        const settings = getProTaskerSettings();

        const originalPath = path.normalize(editor.document.uri.fsPath).replace(/\\/g, "/").toLowerCase();
        const normalizedPath = path.normalize(originalPath).replace(/\\/g, "/").toLowerCase();

        console.log("üìå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å:", originalPath);
        console.log("üìå –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å:", normalizedPath);

        const matchedPath = Object.keys(provider.notesData.lines).find(key =>
            path.basename(key).toLowerCase() === path.basename(normalizedPath)
        );

        if (!matchedPath) {
            console.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å –≤ notesData.");
            return;
        }

        console.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø—É—Ç—å:", matchedPath);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        const fileNotes = provider.notesData.lines[matchedPath] || [];
        console.log("üìå –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏:", fileNotes);

        const MAX_LENGTH = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

        const decorationsArray = [];
        const linesWithNotes = new Set();

        fileNotes.forEach(note => {
            let lineNumber = note.line; // –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∑–∞–º–µ—Ç–∫–∏
            let tooltipText = note.content; // –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ tooltip

            // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º "..."
            if (tooltipText.length > MAX_LENGTH) {
                tooltipText = tooltipText.substring(0, MAX_LENGTH) + "...";
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
            if (!linesWithNotes.has(lineNumber)) {
                linesWithNotes.add(lineNumber);
                const decoration = {
                    range: new vscode.Range(lineNumber - 1, 0, lineNumber - 1, 100),
                    hoverMessage: new vscode.MarkdownString(`**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${note.content}  \n **–¢–∏–ø:** ${note.type}  \n **–°–æ–∑–¥–∞–Ω:** ${provider.timeago.format(new Date(note.createdAt))}`),
                    renderOptions: {}
                };

                if (settings.noteDisplay === "icon") {
                    decoration.renderOptions.before = {
                        contentText: "üìå",
                        color: "red",
                        fontWeight: "bold",
                        margin: "0 10px 0 0"
                    };
                } else if (settings.noteDisplay === "highlight") {
                    decoration.renderOptions.backgroundColor = settings.highlightColor;
                    decoration.renderOptions.after = {
                        contentText:  `// ${tooltipText}`,
                        color: settings.inlineTextColor || " #03a9f4",
                        fontSize: "12px",
                        backgroundColor: settings.highlightColor,
                        margin: "0 0 0 5px",
                        width: "100%",
                        height: "100%"
                    }
                } else if (settings.noteDisplay === "inlineText") {
                    decoration.renderOptions.after = {
                        contentText: `üìú ${tooltipText}`,
                        color: settings.inlineTextColor || " #03a9f4",
                        fontSize: "12px"
                    };
                }
                console.log("Color: ", settings)

                decoration.overviewRulerColor = settings.highlightColor;
                decoration.overviewRulerLane = vscode.OverviewRulerLane.Full;
        
                decorationsArray.push(decoration);

            }
        });

        // **–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤—ã—Ö**
        if (provider.activeDecorationType) {
            console.log("üìå –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏...");
            editor.setDecorations(provider.activeDecorationType, []); // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö
        }

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ –æ—á–∏—Å—Ç–∫–∏
        console.log("üìå –¢–µ–∫—É—â–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π:", decorationsArray);

        // **–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç–∏–ø –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º**
        provider.activeDecorationType = vscode.window.createTextEditorDecorationType({
            isWholeLine: true
        });

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
        editor.setDecorations(provider.activeDecorationType, decorationsArray);
        console.log("üìå –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏:", decorationsArray);
    }
    
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    // vscode.commands.registerCommand('protasker.addNoteToLine', async () => {
    //     const editor = vscode.window.activeTextEditor;
    //     if (!editor) return;
    
    //     const noteContent = await vscode.window.showInputBox({
    //         placeHolder: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏'
    //     });
    
    //     if (noteContent) {
    //         const lineNumber = editor.selection.active.line + 1;  // –°—Ç—Ä–æ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–º–µ—Ç–∫–∞
    //         const filePath = editor.document.uri.fsPath;  // –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É
    
    //         // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –Ω–∞ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    //         provider.addNoteToLine(filePath, lineNumber, "line", noteContent); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
    //         highlightCommentedLines(editor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    //         notesExplorerProvider.refresh();
    //     }
    // });
    
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    // context.subscriptions.push(vscode.commands.registerCommand('protasker.editNote', async () => {
    //     const editor = vscode.window.activeTextEditor;
    //     if (!editor) return;
    
    //     const lineNumber = editor.selection.active.line + 1;  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É
    //     const filePath = path.normalize(editor.document.uri.fsPath).replace(/\\/g, "/").toLowerCase();
    
    //     if (!lineHasNote()) {
    //         vscode.window.showInformationMessage("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.");
    //         return;
    //     }
    
    //     const notesForFile = provider.notesData.lines[filePath] || [];
    //     const notesOnLine = notesForFile.filter(note => note.line === lineNumber);
    
    //     if (notesOnLine.length === 0) {
    //         vscode.window.showInformationMessage("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.");
    //         return;
    //     }
    
    //     const noteToEdit = notesOnLine[0];  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ
    //     const editedContent = await vscode.window.showInputBox({
    //         value: noteToEdit.content,
    //         placeHolder: "–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∑–∞–º–µ—Ç–∫—É"
    //     });
    //     console.log(`—Å—Ç—Ä–æ–∫–∞: ${lineNumber}, –∑–∞–ø–∏—Å—å: ${noteToEdit.content} `)
    
    //     if (editedContent) {
    //         noteToEdit.content = editedContent;
    //         await provider.saveNotesToFile();
    //         provider.refresh();
    //         notesExplorerProvider.refresh()
    //         vscode.window.showInformationMessage("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.");
    //     }
    //     highlightCommentedLines(editor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    // }));
    
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    // context.subscriptions.push(vscode.commands.registerCommand('protasker.deleteNoteFromList', async (treeItem) => {
    //     treeItem.data = treeItem?.data ? treeItem.data : treeItem.context;
    //     const settings = getProTaskerSettings();
    //     console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", treeItem);
    //     if (!treeItem || !treeItem.data || !treeItem.data.id) {
    //         console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", treeItem);
    //         vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");
    //         return;
    //     }
    
    //     const confirm = await vscode.window.showWarningMessage(`–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ${treeItem.data.content} ?`, "–î–∞", "–ù–µ—Ç");
    //     if (confirm !== "–î–∞") return;
    
    //     const customTypes = settings.customTypes.map(item => (item + "s").toLowerCase());
    
    //     const { id, type, prov, path, linepath } = treeItem.data;
    //     let targetCollection = null;
    //     let targetKey = null;
    //     let stillExists = true;

    //     if (path || treeItem.context.path || treeItem.context.dirpath || treeItem.context.filepath) {
    //         targetCollection = provider.notesData[prov];
    //         targetKey = path || treeItem.context.path || treeItem.context.dirpath || treeItem.context.filepath;
    //     }
    //     if (!targetCollection || !targetKey || !targetCollection[targetKey]) {
    //         vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å.");
    //         return;
    //     }
    
    //     console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è ${targetKey} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`);
    
    //     // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    //     let categories = ["comments", "checklists", "events", "notes", ...customTypes];

    //     if(type == "line"){
    //         if (targetCollection[targetKey].length){
    //             targetCollection[targetKey] = targetCollection[targetKey].filter(note => note.id !== id)
    //         }

    //         stillExists = targetCollection[targetKey] && targetCollection[targetKey].length > 0
    //     }else{
    //         categories.forEach(category => {
    //             if (targetCollection[targetKey][category]) {
    //                 targetCollection[targetKey][category] = targetCollection[targetKey][category].filter(note => note.id !== id);
    //             }
    //         });

    //         // **–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ**
    //         stillExists = categories.some(category =>
    //             targetCollection[targetKey][category] && targetCollection[targetKey][category].length > 0
    //         );
    //     }
        
    
        
    
    //     if (!stillExists) {
    //         console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ all: id=${id}, type=${type}`);
    //         delete targetCollection[targetKey];
    //     } else {
    //         console.log(`‚úÖ ${targetKey} –ù–ï –ø—É—Å—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º.`);
    //     }
    
    //     provider.saveNotesToFile();
    //     provider.refresh();
    //     notesExplorerProvider.refresh();
    //     highlightCommentedLines(vscode.window.activeTextEditor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    //     vscode.window.showInformationMessage("‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω.");
    // }));

    // context.subscriptions.push(vscode.commands.registerCommand('protasker.editNoteFromList', async (treeItem) => {
    //     treeItem.data = treeItem?.data ? treeItem.data : treeItem.context;
    //     const settings = getProTaskerSettings();
    //     if (!treeItem || !treeItem.data || !treeItem.data.id) {
    //         console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è!", treeItem);
    //         vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.");
    //         return;
    //     }
    //     const { id, type, prov, path, linepath } = treeItem.data;
    //     let targetCollection = null;
    //     let targetKey = null;
    //     let targetEntry = null;

    //     const customTypes = settings.customTypes.map(item => (item + "s").toLowerCase())
    
    //     if (path || treeItem.context.path || treeItem.context.dirpath || treeItem.context.filepath) {
    //         targetCollection = provider.notesData[prov];
    //         targetKey = path || treeItem.context.path || treeItem.context.dirpath || treeItem.context.filepath;
    //     }
    //     if (!targetCollection || !targetKey || !targetCollection[targetKey]) {
    //         vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å.");
    //         console.log("Warning: " + targetCollection + " " + targetKey)
    //         return;
    //     }

    //     if (prov == "lines") {
    //         // üîπ –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Ñ–∞–π–ª–∞ (lines), –∏—â–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ –º–∞—Å—Å–∏–≤–µ
    //         targetEntry = targetCollection[targetKey].find(note => note.id === id);
    //     } else {
    //         // üîπ –î–ª—è —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏—â–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö (notes, comments, checklists, events)
    //         const categories = ["notes", "comments", "checklists", "events", ...customTypes];
    //         for (const category of categories) {
    //             if (Array.isArray(targetCollection[targetKey][category])) {
    //                 targetEntry = targetCollection[targetKey][category].find(note => note.id === id);
    //                 if (targetEntry) break;
    //             }
    //         }
    //     }
    
    //     if (!targetEntry) {
    //         vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
    //         return;
    //     }
    
    //     // –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    //     const newText = await vscode.window.showInputBox({
    //         placeHolder: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏',
    //         value: targetEntry.content
    //     });
    
    //     if (!newText || newText.trim() === "") {
    //         vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
    //         return;
    //     }
    
    //     // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    //     targetEntry.content = newText;
    
    //     console.log(`‚úèÔ∏è –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: id=${id}, type=${type}, newContent="${newText}"`);
    //     vscode.window.showInformationMessage("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
    
    //     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI
    //     provider.saveNotesToFile();
    //     provider.refresh();
    //     notesExplorerProvider.refresh();
    //     highlightCommentedLines(vscode.window.activeTextEditor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    // }));
    
    
    context.subscriptions.push(vscode.commands.registerCommand('protasker.searchNotes', async () => {
        const query = await vscode.window.showInputBox({
            placeHolder: "üîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...",
            prompt: "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —á–∞—Å—Ç—å –∑–∞–º–µ—Ç–∫–∏"
        });
    
        if (!query || query.trim() === "") {
            vscode.window.showErrorMessage("‚ö†Ô∏è –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
            return;
        }
    
        console.log(`üîç –ò—â–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);
        provider.searchNotes(query);
        provider.filteredNotes = null;
        provider.refresh();
    }));

    context.subscriptions.push(vscode.commands.registerCommand('protasker.clearSearch', () => {
        provider.clearSearch();
        vscode.window.showInformationMessage("üîÑ –ü–æ–∏—Å–∫ —Å–±—Ä–æ—à–µ–Ω.");
    }));

    context.subscriptions.push(vscode.commands.registerCommand('protasker.resetSearch', async () => {
        console.log("üîÑ –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞...");
        provider.search = false;
        provider.filteredNotes = null;
        provider.searchResults = null;  // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        provider.refresh();  // –û–±–Ω–æ–≤–ª—è–µ–º UI
    }));

    context.subscriptions.push(vscode.commands.registerCommand('protasker.filterNotes', async () => {
        const settings = getProTaskerSettings();
        const customTypes = [];
        settings.customTypes.map(note => {
            customTypes.push({label: note, description: `Filter by ${note} only`})
        })
        console.log(settings.customTypes)
        // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const filterType = await vscode.window.showQuickPick(
            [
                { label: 'All', description: 'Show all notes, comments, checklists, events, ...' },
                { label: 'Notes', description: 'Filter by notes only' },
                { label: 'Comments', description: 'Filter by comments only' },
                { label: 'Checklists', description: 'Filter by checklists only' },
                { label: 'Events', description: 'Filter by events only' },
                { label: 'Line', description: 'Filter by events only' },
                ...customTypes
            ],
            { placeHolder: 'Select a type to filter' }
        );
    
        if (!filterType) return;  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.
    
        // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const filterCategory = await vscode.window.showQuickPick(
            [
                { label: 'All', description: 'Show from all categories (files, directories, lines)' },
                { label: 'Files', description: 'Filter by files' },
                { label: 'Directories', description: 'Filter by directories' },
                { label: 'Lines', description: 'Filter by lines' }
            ],
            { placeHolder: 'Select a category to filter by' }
        );
    
        if (!filterCategory) return;  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.
    
        const queryType = filterType.label.toLowerCase();
        const queryCategory = filterCategory.label.toLowerCase();
    
        console.log(`üîç –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É: ${queryType}, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${queryCategory}`);
    
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–∏–ø—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        provider.filterNotes(queryType, queryCategory);
        const filteredResults = await provider.filteredNotes
        console.log(`üîπ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${filteredResults.length}`);
        if (filteredResults.length === 0) {
            vscode.window.showInformationMessage("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.");
        }
    
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ TreeView —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        provider.searchResults = null;
        provider.refresh();  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    
    }));
    
    context.subscriptions.push(vscode.commands.registerCommand('protasker.resetFilter', () => {
        console.log("üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏...");
        provider.selectedType = "all";
        provider.selectedCategory = "all";
        provider.refresh();
    }));
    
    vscode.commands.registerCommand("protasker.goToNote", async (note) => {
        if (!note || !note.context.path || typeof note.context.line !== "number") {
            vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É.");
            return;
        }
    
        const fileUri = vscode.Uri.file(note.context.path);
    
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            await vscode.workspace.fs.stat(fileUri); // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É
            
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            const document = await vscode.workspace.openTextDocument(fileUri);
            const editor = await vscode.window.showTextDocument(document);
    
            // –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–µ–º –∫ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            const position = new vscode.Position(note.context.line - 1, 0);
            const range = new vscode.Range(position, position);
            editor.selection = new vscode.Selection(position, position);
            editor.revealRange(range, vscode.TextEditorRevealType.InCenter);
        } catch (error) {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            vscode.window.showErrorMessage(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fileUri.fsPath}`);
        }
    });

    vscode.commands.registerCommand("protasker.goToFile", async (note) => {
        if (!note || !note.filepath ) {
            vscode.window.showErrorMessage("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª.");
            return;
        }
    
        const fileUri = vscode.Uri.file(note.filepath );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        await vscode.workspace.fs.stat(fileUri); // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É

        const document = await vscode.workspace.openTextDocument(fileUri);
        await vscode.window.showTextDocument(document);
    })
    
    vscode.commands.registerCommand("protasker.deleteAll", async (note) => {
        const editor = vscode.window.activeTextEditor;
        let type = null;
        let path = null;

        switch(note.context.contextValue){
            case "lines":
                type = "lines";
                path = note.context.lineFile;
            break;
            case "file":
                type = "files";
                path = note.context.file;
            break;
            case "directory":
                type = "directories";
                path = note.context.directory;
            break;
        }

        if(type && path){
            const confirm = await vscode.window.showWarningMessage(`–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å ${note.label}?`, "–î–∞", "–ù–µ—Ç");
            if (confirm !== "–î–∞") return;

            const isDirectory = provider.notesData[type][path] !== undefined;
            const target = provider.notesData[type][path];
            
            if (!isDirectory || target.length == 0) {
                console.error("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª–µ/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", path);
                return;
            }

            if(delete provider.notesData[type][path]) vscode.window.showInformationMessage(`Clear ${note.label} success.`);
            else { vscode.window.showErrorMessage(`Clear ${note.label} failed. Try again letter.`); return;};

            await provider.saveNotesToFile();
        
            highlightCommentedLines(editor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
            provider.refresh();
            notesExplorerProvider.refresh();
        }
    })

    // const addNoteButton = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);
    // addNoteButton.text = '$(plus) Add Note';
    // addNoteButton.command = 'protasker.addNoteToLine';
    // addNoteButton.show();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const settings = getProTaskerSettings();
    console.log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", settings);

    context.subscriptions.push(treeView);
    updateNotifications(provider);
}

function updateNotifications(provider) {
    // –ü–æ–ª—É—á–∞–µ–º **–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ** –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const enableNotifications = vscode.workspace.getConfiguration("protasker").get("notificatons");

    if (enableNotifications) {
        console.log("‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã", enableNotifications);
        if (!notifyInterval || notifyInterval == null) {
            notifyInterval = setInterval(() => checkDeadlines(provider), 15000);
            console.log("‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã");
        }
    } else {
        if (notifyInterval) { 
            console.log("‚ùå –û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã", enableNotifications);
            clearInterval(notifyInterval);
            notifyInterval = null;
            console.log("‚ùå –û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã");
        }
    }
}

function checkDeadlines(provider) {
   
    console.log("‚ö° Checking deadlines...");

    const now = Date.now();
    const settings = getProTaskerSettings();
    const checkedItems = new Set(); // ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã

    function checkEntries(entries, location) {
        if (!entries || typeof entries !== "object") return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
    
        for (const category of ["notes", "comments", "checklists", "events", ...settings.customTypes]) {
            if (!entries[category] || !Array.isArray(entries[category])) continue;
    
            for (const note of entries[category]) {
                if (!note.deadline) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞
    
                // ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –≤–º–µ—Å—Ç–æ note.id
                const uniqueKey = `${location}:${note.deadline}:${note.content}`;
                
                if (checkedItems.has(uniqueKey)) {
                    console.log(`üîÅ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å): ${uniqueKey}`);
                    continue;
                }
                checkedItems.add(uniqueKey);
    
                const deadline = new Date(note.deadline).getTime();
                if (isNaN(deadline)) {
                    console.warn(`‚ö†Ô∏è Invalid date in ${location}:`, note.deadline);
                    continue;
                }
    
                const diff = deadline - now;
                console.log(`üîç Checking ${note.type} in ${location}: ${diff}ms left`);
    
                if (diff < 3600000 && diff > 0 && !notifiedDeadlines.has(uniqueKey)) {
                    //vscode.window.showWarningMessage(`‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${note.content}`);
                    playNotificationSound("‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", note.content, "arpeggio-467.mp3");
                    notifiedDeadlines.add(uniqueKey);
                }
                if (diff <= 0 && !notifiedDeadlines.has(uniqueKey)) {
                    vscode.window.showErrorMessage(`‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${note.content}`);
                    playNotificationSound("‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ", note.content, "arpeggio-467.mp3");
                    notifiedDeadlines.add(uniqueKey);
                }
            }
        }
    }
    

    try {
        // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        for (const [filepath, data] of Object.entries(provider.notesData.files || {})) {
            checkEntries(data, `File: ${filepath}`);

            // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª–∞—Ö
            for (const [lineNumber, lineData] of Object.entries(data.lines || {})) {
                checkEntries(lineData, `Line ${lineNumber} in ${filepath}`);
            }
        }

        // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for (const [dirPath, dirData] of Object.entries(provider.notesData.directories || {})) {
            checkEntries(dirData, `Directory: ${dirPath}`);
        }

        console.log("‚úÖ Deadline check completed!");
    } catch (error) {
        console.error("‚ùå Error in checkDeadlines:", error);
    }
}


function playNotificationSound(title, message, sound) {
    notifier.notify({
        title: title || 'ProTasker',
        message: message || '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ!',
        sound: path.join(__dirname, 'sounds', sound)
    });
}


async function getTargetPath(selection) {
    const editor = vscode.window.activeTextEditor;
    if (selection === 'Line') {
        
        return editor ? editor.document.uri.fsPath : null;
    }

    if (selection === 'Directory') {
        const uri = await vscode.window.showOpenDialog({
            canSelectFiles: false,
            canSelectFolders: true,
            canSelectMany: false,
            openLabel: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∑–∞–º–µ—Ç–∫–∏'
        });
        return uri && uri.length > 0 ? uri[0].fsPath : null;
    }
    return editor ? editor.document.uri.fsPath : null;
}

function getProTaskerSettings() {
    const config = vscode.workspace.getConfiguration('protasker');
    return {
        language: config.get('language'),
        customTypes: config.get('customTypes'),
        noteDisplay: config.get('noteDisplay'),
        highlightColor: config.get('highlightColor'),
        showTimeAgo: config.get('showTimeAgo'),
        notificatons: config.get('notificatons'),
        inlineTextColor: config.get('inlineTextColor')
    };
}


function deactivate() {
    console.log('ProTasker extension deactivated');
}

function playSound( soundLink ) {
    vscode.env.openExternal(soundLink);
}

module.exports = {
    activate,
    deactivate
};