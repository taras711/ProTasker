const vscode = require('vscode');
const { NotesExplorer } = require('./src/dataManager');
const path = require("path")

function activate(context) {
    console.log('ProTasker extension activated');
    const provider = new NotesExplorer();
    const treeView = vscode.window.registerTreeDataProvider('sidebar_protasker_id1', provider);
    

    console.log("üîç –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ onDidChangeActiveTextEditor...", provider.activeDecorationType);

    if (vscode.window.activeTextEditor) {
        
        console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ...");
        highlightCommentedLines(vscode.window.activeTextEditor, provider);
    }

    vscode.window.onDidChangeActiveTextEditor(editor => {
        //const editor = vscode.window.activeTextEditor;
        console.log("üìå –°–º–µ–Ω–∏–ª—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä:", editor?.document?.uri.fsPath || "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞");
    
        if (!editor) {
            setTimeout(() => {
                if (editor) {
                    console.log("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏:", editor.document.uri.fsPath);
                    highlightCommentedLines(editor, provider);
                }
            }, 500); // 500 –º—Å –∑–∞–¥–µ—Ä–∂–∫–∞
            return;
        }
    
        highlightCommentedLines(editor, provider);
    });

    vscode.workspace.onDidOpenTextDocument(doc => {
        console.log("üìå –û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª:", doc.uri.fsPath);
        const editor = vscode.window.activeTextEditor;
        if (editor) {
            highlightCommentedLines(editor, provider);
        }
    });

    function lineHasNote() {
        const editor = vscode.window.activeTextEditor;
        if (!editor) return false;
    
        const lineNumber = editor.selection.active.line + 1; // –°—Ç—Ä–æ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ–∏—Ç –∫—É—Ä—Å–æ—Ä
        const filePath = path.normalize(editor.document.uri.fsPath).replace(/\\/g, "/").toLowerCase(); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å —Ñ–∞–π–ª–∞
    
        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Ñ–∞–π–ª–∞: ${filePath}, —Å—Ç—Ä–æ–∫–∞: ${lineNumber}`);
    
        const notesForFile = provider.notesData.lines[filePath] || [];  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞
        const notesOnLine = notesForFile.filter(note => note.line === lineNumber);  // –ò—â–µ–º –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ
    
        console.log(`–ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${lineNumber}:`, notesOnLine);
    highlightCommentedLines(editor, provider);
        return notesOnLine.length > 0;  // –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∏ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
        
    }
    
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    context.subscriptions.push(vscode.commands.registerCommand('protasker.addNote', async () => {
        const editor = vscode.window.activeTextEditor;
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
        const noteContent = await vscode.window.showInputBox({ placeHolder: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏' });
        if (!noteContent) return;  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –≤–≤–µ–¥–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –≥–¥–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫—É
        const selection = await vscode.window.showQuickPick(['File', 'Directory', 'Line'], {
            placeHolder: '–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É'
        });

        if (!selection) return;  // –ï—Å–ª–∏ –≤—ã–±–æ—Ä –Ω–µ —Å–¥–µ–ª–∞–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ (–∑–∞–º–µ—Ç–∫–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á–µ–∫-–ª–∏—Å—Ç –∏ —Ç.–¥.)
        const entryType = await vscode.window.showQuickPick(['Note', 'Comment', 'Checklist', 'Event'], {
            placeHolder: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏'
        });

        if (!entryType) return;  // –ï—Å–ª–∏ —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∑–∞–ø–∏—Å–∏
        let filePath = await getTargetPath(selection);
        if (!filePath) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª, –ø–∞–ø–∫—É –∏–ª–∏ —Å—Ç—Ä–æ–∫—É
        if (selection === 'File') {
            await provider.addEntry(filePath, false, entryType, noteContent); // –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–µ—Ä–µ–¥–∞–µ–º —Å—é–¥–∞
        } else if (selection === 'Directory') {
            await provider.addEntry(filePath, true, entryType, noteContent); // –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–µ—Ä–µ–¥–∞–µ–º —Å—é–¥–∞
        } else if (selection === 'Line') {
            const lineNumber = editor ? editor.selection.active.line + 1 : 0;
            await provider.addNoteToLine(filePath, lineNumber, entryType, noteContent); // –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–µ—Ä–µ–¥–∞–µ–º —Å—é–¥–∞
        }
        highlightCommentedLines(editor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    }));

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
    context.subscriptions.push(vscode.commands.registerCommand('protasker.deleteNote', async (treeItem) => {
        const editor = vscode.window.activeTextEditor;
        console.log("–£–¥–∞–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É", treeItem);
        const filePath = treeItem.parent || treeItem.path;
        if (!filePath) {
            console.error("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return;
        }

        const isDirectory = provider.notesData.directories[filePath] !== undefined;
        const target = isDirectory ? provider.notesData.directories[filePath] : provider.notesData.files[filePath];
        
        if (!target || !target.notes) {
            console.error("–û—à–∏–±–∫–∞: –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª–µ/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", filePath);
            return;
        }

        const noteIndex = target.notes.findIndex(n => n.content.trim() === treeItem.label.trim());
        if (noteIndex === -1) {
            console.error("–û—à–∏–±–∫–∞: –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", treeItem.label);
            return;
        }

        target.notes.splice(noteIndex, 1);
        await provider.saveNotesToFile();
        provider.refresh();
        highlightCommentedLines(editor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    }));

    context.subscriptions.push(vscode.commands.registerCommand("protasker.openComment", async () => {
        const editor = vscode.window.activeTextEditor;
    if (!editor) {
        vscode.window.showErrorMessage("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.");
        return;
    }

    let filePath = path.normalize(editor.document.uri.fsPath).replace(/\\/g, "/").toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –ø—É—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç notesData.json path.normalize(originalPath).replace(/\\/g, "/").toLowerCase();
    const line = editor.selection.active.line +1; // VS Code —Å—á–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å 0, –ø–æ—ç—Ç–æ–º—É +1

    console.log(`üìå –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è: ${filePath}, —Å—Ç—Ä–æ–∫–∞: ${line}`);
    console.log(`üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ notesData.json:`, Object.keys(provider.notesData.lines));

    if (!provider.notesData.lines[filePath]) {
        vscode.window.showErrorMessage("‚ùå –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –∑–∞–º–µ—Ç–æ–∫.");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–∞–π–ª–∞
    const allNotes = provider.notesData.lines[filePath] || [];
    console.log(`üìå –ù–∞–π–¥–µ–Ω–æ ${allNotes.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–∞–π–ª–∞:`, allNotes);

    // üõ† –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
    const lineNotes = allNotes.filter(note => {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å: ${note.line} - ${line}`, note);
        return note.line === line && typeof note.content === "string" && note.content.trim().length > 0;
    });

    console.log(`üìå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${line}:`, lineNotes);

    if (lineNotes.length === 0) {
        vscode.window.showInformationMessage("üì≠ –î–ª—è —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.");
        return;
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
    const fullText = lineNotes.map((note, index) => `Type: ${note.type}* \r\n Content: ${note.content}. \r\n Created: ${note.createdAt}`).join("\n\n");

    vscode.window.showInformationMessage(`üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${line}:\n\n${fullText}`, { modal: true });
    }));
function highlightCommentedLines(editor, provider) {
    if (!editor) return;

    const originalPath = path.normalize(editor.document.uri.fsPath).replace(/\\/g, "/").toLowerCase();
    const normalizedPath = path.normalize(originalPath).replace(/\\/g, "/").toLowerCase();

    console.log("üìå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å:", originalPath);
    console.log("üìå –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å:", normalizedPath);

    const matchedPath = Object.keys(provider.notesData.lines).find(key =>
        path.basename(key).toLowerCase() === path.basename(normalizedPath)
    );

    if (!matchedPath) {
        console.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å –≤ notesData.");
        return;
    }

    console.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø—É—Ç—å:", matchedPath);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    const fileNotes = provider.notesData.lines[matchedPath] || [];
    console.log("üìå –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏:", fileNotes);

    const MAX_LENGTH = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

    const decorationsArray = [];
    const linesWithNotes = new Set();

    fileNotes.forEach(note => {
        let lineNumber = note.line; // –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∑–∞–º–µ—Ç–∫–∏
        let tooltipText = note.content; // –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ tooltip

        // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º "..."
        if (tooltipText.length > MAX_LENGTH) {
            tooltipText = tooltipText.substring(0, MAX_LENGTH) + "...";
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
        if (!linesWithNotes.has(lineNumber)) {
            linesWithNotes.add(lineNumber);
            decorationsArray.push({
                range: new vscode.Range(lineNumber - 1, 0, lineNumber - 1, 100),
                hoverMessage: new vscode.MarkdownString(`üìå **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${note.content}  \n **–¢–∏–ø:** ${note.type}  \n **–°–æ–∑–¥–∞–Ω:** ${note.createdAt}`),
                renderOptions: {
                    before: {
                        contentText: "üìå",
                        color: "red",
                        fontWeight: "bold",
                        margin: "0 10px 0 0"
                    },
                    light: {
                        after: {
                            contentText: ` üìú ${tooltipText}`, // –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ tooltip
                            color: "#03a9f4",
                            fontSize: "12px"
                        }
                    },
                    dark: {
                        after: {
                            contentText: ` ${tooltipText}`,
                            color: "lightgray",
                            fontSize: "12px"
                        }
                    },
                    backgroundColor: "rgba(255, 255, 0, 0.3)" // –ñ—ë–ª—Ç–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
                }
            });
        }
    });

    // **–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤—ã—Ö**
    if (provider.activeDecorationType) {
        console.log("üìå –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏...");
        editor.setDecorations(provider.activeDecorationType, []); // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ –æ—á–∏—Å—Ç–∫–∏
    console.log("üìå –¢–µ–∫—É—â–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π:", decorationsArray);

    // **–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç–∏–ø –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º**
    provider.activeDecorationType = vscode.window.createTextEditorDecorationType({
        isWholeLine: true
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
    editor.setDecorations(provider.activeDecorationType, decorationsArray);
    console.log("üìå –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏:", decorationsArray);
}
    

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    vscode.commands.registerCommand('protasker.addNoteToLine', async () => {
        const editor = vscode.window.activeTextEditor;
        if (!editor) return;
    
        const noteContent = await vscode.window.showInputBox({
            placeHolder: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏'
        });
    
        if (noteContent) {
            const lineNumber = editor.selection.active.line + 1;  // –°—Ç—Ä–æ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–º–µ—Ç–∫–∞
            const filePath = editor.document.uri.fsPath;  // –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É
    
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –Ω–∞ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            provider.addNoteToLine(filePath, lineNumber, "line", noteContent); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
            highlightCommentedLines(editor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
        }
    });
    
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    context.subscriptions.push(vscode.commands.registerCommand('protasker.editNote', async () => {
        const editor = vscode.window.activeTextEditor;
        if (!editor) return;
    
        const lineNumber = editor.selection.active.line + 1;  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É
        const filePath = path.normalize(editor.document.uri.fsPath).replace(/\\/g, "/").toLowerCase();
    
        if (!lineHasNote()) {
            vscode.window.showInformationMessage("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.");
            return;
        }
    
        const notesForFile = provider.notesData.lines[filePath] || [];
        const notesOnLine = notesForFile.filter(note => note.line === lineNumber);
    
        if (notesOnLine.length === 0) {
            vscode.window.showInformationMessage("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.");
            return;
        }
    
        const noteToEdit = notesOnLine[0];  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ
        const editedContent = await vscode.window.showInputBox({
            value: noteToEdit.content,
            placeHolder: "–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∑–∞–º–µ—Ç–∫—É"
        });
        console.log(`—Å—Ç—Ä–æ–∫–∞: ${lineNumber}, –∑–∞–ø–∏—Å—å: ${noteToEdit.content} `)
    
        if (editedContent) {
            noteToEdit.content = editedContent;
            await provider.saveNotesToFile();
            provider.refresh();
            vscode.window.showInformationMessage("–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.");
        }
        highlightCommentedLines(editor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
    }));
    
    
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
        context.subscriptions.push(vscode.commands.registerCommand("protasker.deleteNoteFromLine", async () => {
            const editor = vscode.window.activeTextEditor;
            if (!editor) return;
        
            const filePath = path.normalize(editor.document.uri.fsPath).replace(/\\/g, "/");
            const lineNumber = editor.selection.active.line + 1; // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ (1-based index)
        
            console.log("üìå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ - –§–∞–π–ª:", filePath, "–°—Ç—Ä–æ–∫–∞:", lineNumber);
            console.log("üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—É—Ç–∏ –≤ notesData.lines:", Object.keys(provider.notesData.lines));
        
            // –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å —Å —É—á–µ—Ç–æ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            const matchedPath = Object.keys(provider.notesData.lines).find(key =>
                path.normalize(key).replace(/\\/g, "/").toLowerCase() === filePath.toLowerCase()
            );
        
            if (!matchedPath) {
                vscode.window.showWarningMessage("‚ùå No notes found for this file.");
                return;
            }
        
            console.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø—É—Ç—å:", matchedPath);
            console.log("üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞:", provider.notesData.lines[matchedPath]);
        
            // –¢–µ–ø–µ—Ä—å notesData.lines[matchedPath] - —ç—Ç–æ –º–∞—Å—Å–∏–≤, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ line
            const notesOnLine = provider.notesData.lines[matchedPath].filter(note => Number(note.line) === lineNumber);
        
            console.log("üìå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ:", notesOnLine);
        
            if (notesOnLine.length === 0) {
                vscode.window.showWarningMessage("‚ùå No notes found on this line.");
                return;
            }
    
            
        
            // –ü–æ–∑–≤–æ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫—É—é –∑–∞–º–µ—Ç–∫—É —É–¥–∞–ª–∏—Ç—å
            const selectedNote = await vscode.window.showQuickPick(
                notesOnLine.map(note => ({ label: note.content, id: note.id })), // –ü–µ—Ä–µ–¥–∞–µ–º id –æ—Ç–¥–µ–ª—å–Ω–æ
                { placeHolder: "Select a note to delete" }
            );
    
            const noteObject = selectedNote[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    
        
            if (!selectedNote) {
                console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ.");
                return;
            }
        
        
            // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤, –æ—Å—Ç–∞–≤–ª—è—è –≤—Å–µ, –∫—Ä–æ–º–µ —É–¥–∞–ª—è–µ–º–æ–π –∑–∞–º–µ—Ç–∫–∏
            provider.notesData.lines[matchedPath] = provider.notesData.lines[matchedPath].filter(note => note.id !== selectedNote.id);
        
            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ –æ–±—ä–µ–∫—Ç–∞
            if (provider.notesData.lines[matchedPath].length === 0) {
                delete provider.notesData.lines[matchedPath];
                
            }
        
            provider.saveNotesToFile();
            provider.refresh();
            
            vscode.window.showInformationMessage("‚úÖ Note deleted successfully!");
            setTimeout(() => {
                highlightCommentedLines(editor, provider); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
            }, 500);
            
            
        }));

    // const addNoteButton = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 100);
    // addNoteButton.text = '$(plus) Add Note';
    // addNoteButton.command = 'protasker.addNoteToLine';
    // addNoteButton.show();
    

    context.subscriptions.push(treeView);
}

async function getTargetPath(selection) {
    const editor = vscode.window.activeTextEditor;
    if (selection === 'Line') {
        
        return editor ? editor.document.uri.fsPath : null;
    }

    if (selection === 'Directory') {
        const uri = await vscode.window.showOpenDialog({
            canSelectFiles: false,
            canSelectFolders: true,
            canSelectMany: false,
            openLabel: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∑–∞–º–µ—Ç–∫–∏'
        });
        return uri && uri.length > 0 ? uri[0].fsPath : null;
    }
    return editor ? editor.document.uri.fsPath : null;
}


function deactivate() {
    console.log('ProTasker extension deactivated');
}

module.exports = {
    activate,
    deactivate
};
